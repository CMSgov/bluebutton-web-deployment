---
- name: "Create Virtualenv"
  become_user: "{{ remote_admin_account }}"
  become: yes
  shell: "cd /var/virtualenv; {{ python_bin_dir }}/python{{ python_ver }} -m venv {{ project_dir }}"

- name: Ensure group "www-data" exists
  become_user: "{{ remote_admin_account }}"
  become: yes
  group:
    name: "{{ app_group }}"
    state: present

- name: "Set permissions to application code"
  become_user: "{{ remote_admin_account }}"
  become: yes
  file:
    dest: "{{ app_pyapp_home }}"
    state: directory
    recurse: yes
    owner: "{{ app_pyapps_user }}"
    group: "{{ app_group }}"
    mode: 0755

- name: "set ownership to pyapps:www-data ({{ app_pyapps_user }}:{{ app_group }})"
  become_user: "{{ remote_admin_account }}"
  become: yes
  file:
    owner: "{{ app_pyapps_user }}"
    group: "{{ app_group }}"
    dest: "/var/virtualenv"
    state: directory
    recurse: yes

- name: "install from git: {{ project_repo }} branch:{{ git_branch }}"
  become_user: "{{ remote_admin_account }}"
  become: yes
  git:
    repo: "{{ project_repo }}"
    dest: "{{ install_root }}/{{ project_name }}"
    force: yes
    clone: yes

- name: "update from git: {{ project_repo }} branch:{{ git_branch }}"
  become_user: "{{ remote_admin_account }}"
  become: yes
  git:
    repo: "{{ project_repo }}"
    dest: "{{ install_root }}/{{ project_name }}"
    version: "{{ git_branch }}"
  register: git_history

- name: "clone bluebutton-css to hhs_oauth_server app base directory"
  become_user: "{{ remote_admin_account }}"
  become: yes
  git:
    repo: "{{ css_repo }}"
    dest: "{{ install_root }}/{{ project_name }}/{{ css_dir }}"
    force: yes
    clone: yes

- name: "Echo ansible version"
  shell: ansible --version
  register: ver_output
- debug:
    var: ver_output.stdout_lines

- name: "Display collection list"
  shell: ansible-galaxy collection list
  register: col_output
- debug:
    var: col_output.stdout_lines

# - name: "python version"
#   shell: which python
#   register: python_ver
# - debug:
#     var: python_ver.stdout_lines

# - name: "boto3 version"
#   shell: python -c 'import boto3; print(boto3.__version__)'
#   register: boto_ver
# - debug:
#     var: boto_ver.stdout_lines

- name: "Install pip"
  become_user: "{{ remote_admin_account }}"
  become: yes
  shell: python -m ensurepip --upgrade
  register: pip_install
- debug:
    var: pip_install.stdout_lines

- name: "Ensure botocore and boto3 modules are installed"
  become_user: "{{ remote_admin_account }}"
  become: yes
  pip:
    name: [ "boto3", "botocore"]
    extra_args: "--user"

- name: "test s3 list files"
  become_user: "{{ remote_admin_account }}"
  become: yes
  aws_s3:
    bucket: "{{ test_s3_storage_bucket_name }}"
    mode: list
    prefix: "static/dist"
  register: listresult
- debug: msg={{listresult.s3_keys}}

# - name: "Upload legacy-preserved.css file to TEST content S3 bucket"
#   become_user: "{{ remote_admin_account }}"
#   become: yes
#   aws_s3:
#     bucket: "{{ test_s3_storage_bucket_name }}"
#     mode: put
#     object: "static/legacy-preserved.css"
#     src: "{{ project_parent }}{{ common_project_dir }}/{{ common_project_name }}/bluebutton-css/legacy-preserved.css"
#   register: putresult
# - debug: msg="{{ putresult.msg }} and the S3 Object URL is {{putresult.url}}"
#   when: putresult.changed

# - name: "Upload sandbox-main.css file to TEST content S3 bucket"
#   become_user: "{{ remote_admin_account }}"
#   become: yes
#   amazon.aws.aws_s3:
#     bucket: "{{ test_s3_storage_bucket_name }}"
#     mode: put
#     object: "static/dist/sandbox-main.css"
#     src: "{{ project_parent }}{{ common_project }}/hhs_oauth_server/sitestatic/css/sandbox-main.css"
#   register: putresult

# - name: "Upload static-main.css file to TEST content S3 bucket"
#   become_user: "{{ remote_admin_account }}"
#   become: yes
#   amazon.aws.aws_s3:
#     bucket: "{{ test_s3_storage_bucket_name }}"
#     mode: put
#     object: "static/dist/static-main.css"
#     src: "{{ project_parent }}{{ common_project }}/hhs_oauth_server/sitestatic/css/static-main.css"
#   register: putresult

# - name: "Upload legacy-preserved.css file to IMPL content S3 bucket"
#   become_user: "{{ remote_admin_account }}"
#   become: yes
#   amazon.aws.aws_s3:
#     bucket: "{{ impl_s3_storage_bucket_name }}"
#     mode: put
#     object: "static/legacy-preserved.css"
#     src: "{{ project_parent }}{{ common_project }}/hhs_oauth_server/bluebutton-css/legacy-preserved.css"
#   register: putresult

# - name: "Upload sandbox-main.css file to IMPL content S3 bucket"
#   become_user: "{{ remote_admin_account }}"
#   become: yes
#   amazon.aws.aws_s3:
#     bucket: "{{ impl_s3_storage_bucket_name }}"
#     mode: put
#     object: "static/dist/sandbox-main.css"
#     src: "{{ project_parent }}{{ common_project }}/hhs_oauth_server/sitestatic/css/sandbox-main.css"
#   register: putresult

# - name: "Upload static-main.css file to IMPL content S3 bucket"
#   become_user: "{{ remote_admin_account }}"
#   become: yes
#   amazon.aws.aws_s3:
#     bucket: "{{ impl_s3_storage_bucket_name }}"
#     mode: put
#     object: "static/dist/static-main.css"
#     src: "{{ project_parent }}{{ common_project }}/hhs_oauth_server/sitestatic/css/static-main.css"
#   register: putresult

# - name: "Upload legacy-preserved.css file to PROD content S3 bucket"
#   become_user: "{{ remote_admin_account }}"
#   become: yes
#   amazon.aws.aws_s3:
#     bucket: "{{ prod_s3_storage_bucket_name }}"
#     mode: put
#     object: "static/legacy-preserved.css"
#     src: "{{ project_parent }}{{ common_project }}/hhs_oauth_server/bluebutton-css/legacy-preserved.css"
#   register: putresult

# - name: "Upload sandbox-main.css file to PROD content S3 bucket"
#   become_user: "{{ remote_admin_account }}"
#   become: yes
#   amazon.aws.aws_s3:
#     bucket: "{{ prod_s3_storage_bucket_name }}"
#     mode: put
#     object: "static/dist/sandbox-main.css"
#     src: "{{ project_parent }}{{ common_project }}/hhs_oauth_server/sitestatic/css/sandbox-main.css"
#   register: putresult

# - name: "Upload static-main.css file to PROD content S3 bucket"
#   become_user: "{{ remote_admin_account }}"
#   become: yes
#   amazon.aws.aws_s3:
#     bucket: "{{ prod_s3_storage_bucket_name }}"
#     mode: put
#     object: "static/dist/static-main.css"
#     src: "{{ project_parent }}{{ common_project }}/hhs_oauth_server/sitestatic/css/static-main.css"
#   register: putresult

- name: "set permissions to application code ( {{ app_pyapps_user }}:{{ app_group }} )"
  become_user: "{{ remote_admin_account }}"
  become: yes
  file:
    dest: "{{ app_pyapp_home }}"
    state: directory
    recurse: yes
    owner: "{{ app_pyapps_user }}"
    group: "{{ app_group }}"
    mode: 0755

- name: "install requirements"
  become_user: "{{ remote_admin_account }}"
  become: yes
  shell: |
    source {{ app_py_virtual_env }}/bin/activate && make reqs-install
  args:
    chdir: "{{ app_pyapp_home }}/{{ common_project_name }}"
  register: out

- debug: var=out.stdout_lines

# Use task directly rather than importing from deprecated location
- name: "Create a back-end app certstore"
  become_user: "{{ remote_admin_account }}"
  become: yes
  file:
    dest: "{{ app_pyapp_home }}/certstore"
    mode: 0750
    owner: "{{ app_pyapps_user }}"
    group: "{{ app_group }}"
    recurse: yes
    state: directory

- name: "Create run dir for service .sock/.pid files"
  become_user: "{{ remote_admin_account }}"
  become: yes
  file:
    dest: "{{ app_pyapp_home }}/run"
    mode: 0755
    owner: "{{ app_pyapps_user }}"
    group: "{{ app_group }}"
    recurse: yes
    state: directory

# change ownership of files
- name: "Update file ownership"
  become_user: "{{ remote_admin_account }}"
  become: yes
  file:
    path: "{{ install_root }}/{{ project_name }}/"
    recurse: yes
    owner: "{{ app_owner }}"
    group: "{{ app_group }}"
    mode:  "u+rw,g+rw,o-rwx"

# Change ownership for libraries
- name: "Change ownership for libraries"
  become_user: "{{ remote_admin_account }}"
  become: yes
  file:
    path: "{{ venv }}"
    recurse: yes
    owner: "{{ app_owner }}"
    group: "{{ app_group }}"
    mode:  "u+rw,g+rw,o-rwx"

- name: make manage.py executable
  become_user: "{{ remote_admin_account }}"
  become: yes
  file:
    path: "{{ install_root }}/{{ project_name }}/manage.py"
    state: touch
    mode: "u+rwx,g+rwx,o-rwx"
