---
# File: env.yml 
# Created: 4/4/17
# Environment specific variables
# DEV

### ami-release
env_ami_release: "2017-05-11"

# This image should be updated monthly.
# Current version is: EAST-RH 7-3 Gold Image V.1.09 (HVM) 04-21-2017 - ami-fdde41eb
# EAST-RH 6-9 Gold Image V.1.01 (PV) 04-21-17 - ami-3dda452b
# EAST-RH 6-8 Gold Image V.3.17 (PV)Splunk-CFN-FIPS140-02-24-17 (ami-f070abe6)
# EAST-RH 7-3 Gold Image V.1.10 (HVM) 05-18-17 - ami-3aff872c
# EAST-RH 7-4 Gold Image V.1.15 (HVM) 11-2-17 - ami-5a6ac120
# EAST-RH 7-4 Gold Image V.1.16 (HVM) 11-17-17) - ami-7096140a (previous)
# EAST-RH 7-4 Gold Image V.1.17 (HVM) 12-27-17 - ami-86e9abfc

env_ami_app_gold_image: "ami-86e9abfc" # Change the AMI, from which you want to launch the server

### Environment:
env_env: "dev"

### AWS Region
env_aws_region: "us-east-1"

env_python_ver: "3.4"
env_python_ver_full: "{{ env_python_ver }}.5"
env_mod_wsgi_ver_full: "4.5.15"
env_python_bin_dir: "/usr/bin/"

# Remote user access account
env_remote_user_account: "{{ vault_env_remote_user_account }}"
env_remote_admin_account: "{{ vault_env_remote_admin_account }}"

### DJANGO_SECRET_KEY:
# 8 Character Prefix and Suffix
# Relate Suffix to Deployment Environment
env_secret_pfx: "BBOAUTH2"
env_secret_sfx: "{{ env|upper }}"
# 50 character Random Key
# http://www.miniwebtool.com/django-secret-key-generator/
env_rand_secret: "{{ vault_env_rand_secret }}"
env_django_secret_key: "{{ env_secret_pfx }}{{ env_rand_secret }}{{ env_secret_sfx }}"

# the git repository URL for the project
# project_repo: git@github.com:transparenthealth/hhs_oauth_server.git
# env_project_repo: "https://github.com/hhsidealab/hhs_oauth_server.git"
env_project_repo: "https://github.com/CMSgov/bluebutton-web-server.git"

# git branch to deploy
env_git_branch: "develop"

# Settings Module:
# e.g. hhs_oauth_server.settings.aws-[ dev | test | impl | prod]
env_django_settings_module: "{{ vault_env_django_settings_module }}"
# Settings folder in project
env_django_settings_folder: "hhs_oauth_server/hhs_oauth_server/settings"

# DEBUG Mode
# False in IMPL / PROD
env_django_debug: True

env_django_admins: (('Mark Scrimshire[Dev]', 'mark@ekivemark.com'), )

# Project Parent Dir
# the base path to install to. You should not need to change this.
# git installs the repo in a folder beneath this path
# slash terminated folder definition
env_project_parent: "/var/pyapps/"

# The directory that virtualenv is created in and git is cloned into
  # eg. /var/virtualenv/hhs_o_server and /var/pyapps/hhs_o_server
env_project_dir: "hhs_o_server"

# Virtual Environment base location - slash terminated
env_venv: "/var/virtualenv/"

# The value of your django project's STATIC_ROOT settings.
# This will be the directory that django's `collectstatic` management command
# copies static files to, and it must be an absolute path. The default value
# here assumes that STATIC_ROOT is set in your settings.py like so:
# STATIC_ROOT = os.path.abspath(os.path.join(BASE_DIR, 'static'))
# relative directory from BASE_DIR.
# Recommend using default "static"
# env_static_root_dir: "static"
env_static_root_dir: "static"

### External Internet Domain Name for the platform
## DEV:
env_external_dns_name: "{{ env|lower }}.bluebutton.cms.gov"

### TransparentHealthServer default settings:
## MiHIN TestServer:
env_ths_fhir_server: "http://52.72.172.54:8080"
env_ths_fhir_path: "/fhir"
env_ths_fhir_rel: "/baseDstu2"
env_ths_fhir_rewrite_to: "https://{{ env_external_dns_name }}/bluebutton/fhir/v1"
env_ths_fhir_rewrite_from: "[\"{{ env_ths_fhir_server}}{{ env_ths_fhir_path}}{{ env_ths_fhir_rel }}\",]"
env_ths_search_expiry: 30

env_django_fhir_certstore_relative: '../certstore'

env_django_signup_timeout_days: 7

### HOSTNAME_URL:
env_host_url: "{{ env_external_dns_name }}"

# django environment specific apps list
# A test client - moved to aws-test / dev /impl settings
env_django_environment_apps: ['storages', 'apps.testclient', ]
env_django_optional_installed_apps: ["testclient", ]
env_django_cors_origin_allow_all: True
env_django_authentication_backends: ('django.contrib.auth.backends.ModelBackend', 'apps.accounts.auth.SettingsBackend' )
## Add next line to the above list to use MyMedicare for authentication
# 'apps.accounts.mymedicare_auth.MyMedicareBackend',

### Email configuration - AWS SES
# email backend options are:
# django_email_backend:  'django.core.mail.backends.smtp.EmailBackend'
# django_email_backend:  'django.core.mail.backends.filebased.EmailBackend'
# django_email_backend:  'django.core.mail.backends.locmem.EmailBackend'
# django_email_backend:  'django.core.mail.backends.dummy.EmailBackend'
# django_email_backend:  'django_ses.SESBackend'

env_django_email_backend: "django_ses.SESBackend"

env_django_email_region: "us-east-1"
env_django_email_ses_endpoint: "email.us-east-1.amazonaws.com"
env_django_from_email: "bluebutton.dev@fhirservice.net"
env_django_admin_email: "mark.scrimshire@cms.hhs.gov"

# Require Invite to Register
# Set to False in NON-PROD Environments
# Set to True in PROD Environment
env_django_require_invite_to_register: False

# SALT and ITERATIONS
env_django_user_id_salt: "{{ vault_env_django_user_id_salt }}"
env_django_user_id_iterations: "{{ vault_env_django_user_id_iterations }}"

### S3 Bucket Settings:
## DEV
env_s3_bucket_account: "{{ vault_env_s3_bucket_account }}"
env_aws_access_id: "{{ vault_env_aws_access_id }}"
env_aws_secret_key: "{{ vault_env_aws_secret_key }}"
env_s3_storage_bucket_name: "{{ vault_env_s3_storage_bucket_name }}"

### Route53 Settings
## DEV
env_r53_account: "{{ vault_env_r53_account }}"
env_r53_access_id: "{{ vault_env_r53_access_id }}"
env_r53_secret_key: "{{ vault_env_r53_secret_key }}"

env_apache_cert_store: "/etc/httpd/ssl/certs"

### Django Settings:
##  DJANGO_ORGANIZATION_NAME='{{ django_org_name }}'
##  DJANGO_APPLICATION_TITLE='{{ django_app_title }}'
## DEV | TEST | IMPL:
env_django_org_name: "CMS Medicare Blue Button[{{ env|upper }}]"
env_django_app_title: "CMS Blue Button Developer Preview"

# add new url prefix for admin/
env_django_admin_redirector: "{{ vault_env_django_admin_redirector }}"

### Database Settings:
## Postgresql 9.6
## export RDS_DB_PLATFORM='postgres'
## export RDS_DB_ENGINE='django.db.backends.postgresql_psycopg2'
## export RDS_DB_NAME='something_secret'
## export RDS_DB_OPTIONS='?sslmode=require'
## export RDS_USERNAME='some_user'
## export RDS_PASSWORD='super_secret_password'
## export RDS_HOSTNAME='some.ip.or.dns.name'
## export RDS_PORT='5432'
### Database Access String Construction: postgres://USER:PASSWORD@HOST:PORT/NAME
## export DEFAULT_DB_SET="$RDS_DB_PLATFORM://$RDS_USERNAME:$RDS_PASSWORD@$RDS_HOSTNAME:$RDS_PORT/$RDS_DB_NAME"
env_db_platform_type: "postgres"
env_db_engine_driver: "django.db.backends.postgresql_psycopg2"
env_db_name: "{{ vault_env_db_name }}"
env_db_host_options: "?sslmode=require"
env_db_user_name: "{{ vault_env_db_user_name }}"
env_db_user_pw: "{{ vault_env_db_user_pw }}"
# RDS
# env_db_host_address: "bb-rds-dev-db-pg-01.cvftfvp6wjzz.us-east-1.rds.amazonaws.com"
# env_db_host_port: "15432"
# EC2 Instance
env_db_host_address: "{{ hostvars[groups['dbservers'][0]]['inventory_hostname'] }}"  ## "10.224.78.100"
# env_db_host_port: "15432"
# RDS Instance
env_db_host_address: "bb-rds-dev-db-pg-01.cvftfvp6wjzz.us-east-1.rds.amazonaws.com"
env_db_host_port: "15432"


# dev: vpc-80bdc3e7, impl: vpc-5fd4de38, test: vpc-5d5a163a, prod: vpc-9b3fc9fd
env_cf_vpc_id: "vpc-80bdc3e7"
env_cf_platform_version: "03"

# sg-50deff2f: BB-SG-DEV-DATA-ALLZONE, sg-d3ac8dac: BB-SG-IMPL-DATA-ALLZONE
# sg-6892b317: BB-SG-PROD-DATA-ALLZONE, sg-feaa8b81: BB-SG-TEST-DATA-ALLZONES
env_cf_data_sg_data_zone_id: "sg-50deff2f"
env_cf_data_azone: "az1"
env_cf_data_build_image_id: "ami-f070abe6"
# cf_data_tag_key_layer AllowedValues: ["dmz", "web", "app", "data", "mgmt", "nat", "jump", "tools"]
env_cf_data_tag_key_layer: "data"
env_cf_data_instance_name: "bb-{{ env }}-{{ env_cf_data_tag_key_layer }}-{{ env_cf_platform_version }}"
env_cf_data_database_type: "postgres"
env_cf_data_database_prefix: "bb_fe_"
# cf_data_tag_key_stack AllowedValues: ["dev", "test", "impl", "prod", "sbx", "tools"]
env_cf_data_tag_key_stack: "{{ env }}"
env_cf_data_key_name: "cms_bluebutton_fe_dev"
env_cf_data_instance_type: "m3.medium"
env_cf_data_pgsql_server_name: "{{ env_cf_data_tag_key_layer }}.{{ env }}.bluebutton.cms.fhirservice.net"
env_cf_data_pyapps_home: "/var/pyapps/{{ env_project_dir }}"
env_cf_data_pgsql_master: "{{ env_db_user_name }}"
env_cf_data_pyapps_email: "{{ env_cf_data_tag_key_layer }}.admin.{{ env }}@fhirservice.net"
env_cf_data_pgsql_password: "{{ vault_env_cf_data_pgsql_password }}"
# dev: vpc-80bdc3e7, impl: vpc-5fd4de38, test: vpc-5d5a163a, prod: vpc-9b3fc9fd
env_cf_data_vpc_id: "{{ env_cf_vpc_id }}"
env_cf_data_vol_size: 10
env_cf_data_vol_id: ""

# ssl settings
env_cf_data_ssl: "on"
env_cf_data_cert_file: "server.crt"
env_cf_data_key_file: "server.key"
env_cf_data_ca_file: ""
env_cf_data_crl_file: ""

env_cf_data_db_backup_key_id: "{{ vault_env_cf_data_db_backup_key_id }}"
env_cf_data_db_backup_secret_key: "{{ vault_env_cf_data_db_backup_secret_key }}"

#
# Appserver extra volumes
# /tmp
# size: 100 Gib
# VolumeType: SSD GP2

#/var
#
#
env_app_extra_volume_0: {"path": "/", "src": "/dev/sda1", "size": 50, "vol_type": "gp2", "fstype": "ext4", "encrypted": "yes"}
env_app_extra_volume_1: {"path": "/tmp", "src": "/dev/sdf", "size": 100, "vol_type": "gp2", "fstype": "ext4", "encrypted": "yes"}
env_app_extra_volume_2: {"path": "/var", "src": "/dev/sdg", "size": 200, "vol_type": "gp2", "fstype": "ext4", "encrypted": "yes"}

# Apache cert, key and fullchain files
# Assigned Certificates and Keys to be copied to /etc/httpd/ssl/certs
env_apache_cert_file: "{{ vault_env_apache_cert_file }}"
env_apache_key_file: "{{ vault_env_apache_key_file }}"
env_apache_fullchain_file: "{{ vault_env_apache_fullchain_file }}"

# AppServer cert and key for communication with FHIR Server
env_app_fhir_cert: "{{ vault_env_app_fhir_cert }}"
env_app_fhir_key: "{{ vault_env_app_fhir_key }}"
env_app_fhir_cert_subdir: "{{ vault_env_app_fhir_cert_subdir }}"
env_app_fhir_cert_name: "ca.cert.pem"
env_app_fhir_key_name: "ca.key.nocrypt.pem"


# sg-ac1130d3: BB-SG-DEV-APPSERVER-ALLZONE
# sg-faa88985: BB-SG-TEST-APPSERVER-ALLZONE
# sg-96ac8de9: BB-SG-IMPL-APPSERVER-ALLZONE
# sg-e491b09b: BB-SG-PROD-APPSERVER-ALLZONE
env_cf_app_sg_app_zone_id: "sg-ac1130d3"
env_cf_app_azone: "az2"
env_cf_app_build_image_id: "ami-d8c7aecf}"
env_cf_app_tag_key_stack: "{{ env }}"
env_cf_app_tag_key_layer: "app"
env_cf_app_instance_name: "bb-{{ env }}-{{ env_cf_app_tag_key_layer }}-{{ env_cf_platform_version }}"
env_cf_app_key_name: "cms_bluebutton_fe_dev"
env_cf_app_instance_type: "m3.medium"
# "AllowedValues": ["LEADER" , "FOLLOW"]
# Removing Herd Member designation
# env_cf_app_herd_member: "LEADER"
env_cf_app_public_server_name: "{{ env }}.bluebutton.cms.gov"
# env_cf_app_pyserver_name: "{{ env_cf_app_tag_key_layer }}-{{ env_cf_app_herd_member }}.{{ env }}.bluebutton.cms.fhirservice.net"
env_cf_app_pyserver_name: "{{ env_cf_app_tag_key_layer }}.{{ env }}.bluebutton.cms.gov"
env_cf_app_py_virtual_env: "/var/virtualenv/{{ env_project_dir }}"
env_cf_app_pyapp_home: "/var/pyapps/{{ env_project_dir}}"
# "AllowedValues": ["settings.base", "settings.production", "settings.aws-dev",
#                   "settings.aws-test", "settings.dev", "settings.aws-prod", "settings.aws-impl"]
env_cf_app_pyapp_settings: "settings.aws-dev"
env_cf_app_repo_branch: "develop"
env_cf_app_pyapps_user: "pyapps"
env_cf_app_db_user: "{{ env_cf_data_pgsql_master }}"
env_cf_app_db_pwd: "{{ vault_env_cf_data_pgsql_password }}"
# email to send email to regarding pyapps account. eg. password reset.
env_cf_app_pyapps_email: "mark.scrimshire@cms.hhs.gov"
env_cf_app_pyapps_pwd: "{{ vault_env_cf_app_pyapps_pwd }}"
# "AllowedValues": ["postgres", "mysql"]
env_cf_app_db_type: "{{ env_cf_data_database_type }}"
env_cf_app_db_prefix: "{{ env_cf_data_database_prefix }}"

env_cf_app_aws_content_access_key: "{{ vault_env_cf_app_aws_content_access_key }}"
env_cf_app_aws_content_key_id: "{{ vault_env_cf_app_aws_content_key_id }}"

env_cf_app_target_vpc_id: "{{ env_cf_vpc_id }}"
# Application Logging Directory
env_cf_app_log_dir: "/var/log/pyapps"

# Service Monitoring Accounts
env_mon_nessus_user: "{{ vault_env_mon_nessus_user }}"
env_mon_nessus_pwd: "{{ vault_env_mon_nessus_pwd }}"
env_mon_nessus_pub_key: "{{ vault_env_mon_nessus_pub_key }}"

# Type of Elastic Load Balancer: app | net | classic | appclassic
env_elastic_load_balancer_type: "classic"

# Classic Load Balancer Name:
# follows format: BB-{env}-CLB-n
env_app_clb_name: "BB-DEV-CLB-1"

# Port 80 Target Group for ELB
env_app_lb_arn: "{{ vault_env_app_lb_arn}}"
# Port 443 Target Group for ELB
env_app_ssl_lb_arn: "{{ vault_env_app_ssl_lb_arn }}"

# Port 80 or 443 from ALB to APPServer = http | https
env_app_lb_app_protocol: "https"

# splunk configuration
# Layer = WEB | APP | DATA | MGMT
# set the next line in the vars section of the playbook
# Group name = BBAPI
env_splunk_group_name: "BBAPI"
# splunk_target_layer: "WEB | APP | DATA | MGMT"
env_splunk_target_layer: "TBD"
env_splunk_client_name: "{{ env_splunk_group_name }}-{{ env|upper }}-{{ env_splunk_target_layer|upper }}"
# V2 Splunk
# targetUri=10.128.11.78:8089
# v3 Splunk
# targetUri=10.244.112.51:8089
env_splunk_target_server: "10.244.112.51"
env_splunk_target_port: "8089"

# CA Certificate password
env_ca_rootca_password: "{{ vault_env_ca_rootca_password }}"

# AWS ARN for SNS messaging
env_sns_topic_arn: "arn:aws:sns:us-east-1:501705132200:config-topic-BB"

# ssh authorized_keys settings:
#      user: "{{ ssh_user }}"
#      state: present
#      exclusive: "{{ ssh_key_replace }}"  # "yes" or "no"
#      key: "{{ ssh_auth_keys }}"
env_ssh_user: "ec2-user"
env_ssh_key_replace: "no"
env_ssh_auth_keys: "{{ vault_env_ssh_auth_keys }}"

#
# MyMedicare Authentication Integration
#
env_medicare_logon: True
env_sls_token_endpoint: "{{ vault_env_sls_token_endpoint }}"
env_medicare_login_uri: "{{ vault_env_medicare_login_uri }}"
env_medicare_redirect_uri: "{{ vault_env_medicare_redirect_uri }}"
env_medicare_login_template_name: "{{ vault_env_medicare_login_template_name }}"
env_authorization_template_name: "{{ vault_env_authorization_template_name }}"
env_sls_verify_ssl: "{{ vault_env_sls_verify_ssl }}"

# Should be set to True in production and False in all other dev and test environments
env_django_block_http_redirect: "False"

env_django_oauth2_provider: |
  {
    'OAUTH2_VALIDATOR_CLASS': 'apps.dot_ext.oauth2_validators.'
                              'SingleAccessTokenValidator',
    'OAUTH2_SERVER_CLASS': 'apps.dot_ext.oauth2_server.Server',
    'SCOPES_BACKEND_CLASS': 'apps.dot_ext.scopes.CapabilitiesScopes',
    'OAUTH2_BACKEND_CLASS': 'apps.dot_ext.oauth2_backends.OAuthLibSMARTonFHIR',
    'ALLOWED_REDIRECT_URI_SCHEMES': ['https',
                                     'http'
                                     ]
  }

env_django_mobile_redirect_regex: r'\b[a-zA-Z]{2}[0-9]{8}\b'

env_django_logging: |
  {
      'version': 1,
      'disable_existing_loggers': False,
      'formatters': {
          'verbose': {
              'format': '%(asctime)s %(levelname)s %(name)s '
                        '[%(process)d] %(message)s',
              'datefmt': '%Y-%m-%d %H:%M:%S'
          },
          'simple': {
              'format': '%(asctime)s %(levelname)s %(name)s %(message)s',
              'datefmt': '%Y-%m-%d %H:%M:%S'
          },
          'jsonout': {
              'format': '{"time": "%(asctime)s", "level": "%(levelname)s", '
                        '"name": "%(name)s", "message": "%(message)s"}',
              'datefmt': '%Y-%m-%d %H:%M:%S'

          }
      },
      'filters': {
          'require_debug_true': {
              '()': 'django.utils.log.RequireDebugTrue',
          },
          'require_debug_false': {
              '()': 'django.utils.log.RequireDebugFalse',
          },
      },
      'handlers': {
          'console': {
              'class': 'logging.StreamHandler',
              'formatter': 'simple',
          },
          'file_debug': {
              'level': 'DEBUG',
              'class': 'logging.FileHandler',
              'formatter': 'simple',
              'filename': '/var/log/pyapps/debug.log',
          },
          'file_error': {
              'level': 'INFO',
              'filters': ['require_debug_true'],
              'class': 'logging.FileHandler',
              'formatter': 'verbose',
              'filename': '/var/log/pyapps/error.log',
          },
          'file_info': {
              'level': 'INFO',
              'filters': ['require_debug_true'],
              'class': 'logging.FileHandler',
              'formatter': 'simple',
              'filename': '/var/log/pyapps/info.log',
          },
          'badlogin_info': {
              'level': 'INFO',
              'class': 'logging.FileHandler',
              'formatter': 'simple',
              'filename': '/var/log/pyapps/login_failed.log',
          },
          'adminuse_info': {
              'level': 'INFO',
              'class': 'logging.FileHandler',
              'formatter': 'simple',
              'filename': '/var/log/pyapps/admin_access.log',
          },
          'mail_admins': {
              'level': 'ERROR',
              'class': 'django.utils.log.AdminEmailHandler',
              'formatter': 'verbose'
          },
          'perf_mon': {
              'level': 'INFO',
              'class': 'logging.FileHandler',
              'formatter': 'jsonout',
              'filename': '/var/log/pyapps/perf_mon.log',
          }
      },
      'loggers': {
          'hhs_server': {
              'handlers': ['console', 'file_debug'],
              'level': 'DEBUG',
          },
          'hhs_oauth_server.accounts': {
              'handlers': ['console'],
              'level': 'DEBUG',
          },
          'hhs_server_debug': {
              'handlers': ['console', 'file_debug'],
              'level': 'DEBUG',
          },
          'hhs_server_error': {
              'handlers': ['console', 'file_error', 'mail_admins'],
              'level': 'ERROR',
          },
          'unsuccessful_logins': {
              'handlers': ['console', 'badlogin_info'],
              'level': 'INFO',
          },
          'admin_interface': {
              'handlers': ['console', 'adminuse_info'],
              'level': 'INFO',
          },
          'hhs_server_info': {
              'handlers': ['console', 'file_info'],
              'level': 'INFO',
          },
          'oauth2_provider': {
              'handlers': ['console'],
              'level': 'INFO',
          },
          'oauthlib': {
              'handlers': ['console'],
              'level': 'INFO',
          },
          'tests': {
              'handlers': ['console'],
              'level': 'DEBUG',
          },
          'performance': {
              'handlers': ['console', 'perf_mon'],
              'level': 'INFO',
          }
      },
  }
