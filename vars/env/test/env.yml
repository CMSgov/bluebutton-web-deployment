---

### Environment:
env_env: "test"

### DJANGO_SECRET_KEY:
# 8 Character Prefix and Suffix
# Relate Suffix to Deployment Environment
env_secret_pfx: "BBOAUTH2"
env_secret_sfx: "{{ env|upper }}"
# 50 character Random Key
# http://www.miniwebtool.com/django-secret-key-generator/
env_rand_secret: "{{ vault_env_rand_secret }}"
env_django_secret_key: "{{ env_secret_pfx }}{{ env_rand_secret }}{{ env_secret_sfx }}"

# DEBUG Mode
# False in IMPL / PROD
env_django_debug: False

### External Internet Domain Name for the platform
env_external_dns_name: "test.bluebutton.cms.gov"

env_django_fhir_certstore_relative: '../certstore'

env_django_signup_timeout_days: 7

# django environment specific apps list
env_django_environment_apps: ['storages', ]
env_django_optional_installed_apps: ["testclient", ]
env_django_cors_origin_allow_all: True

### Email configuration - AWS SES
env_django_email_backend: "django_ses.SESBackend"
env_django_from_email: "BlueButtonAPI@cms.hhs.gov"
env_django_admin_email: "BlueButtonAPI@cms.hhs.gov"

# SALT and ITERATIONS
env_django_user_id_salt: "{{ vault_env_django_user_id_salt }}"
env_django_user_id_iterations: "{{ vault_env_django_user_id_iterations }}"

# django password hash iterations
env_django_password_hash_iterations: "{{ vault_env_django_password_hash_iterations }}"

env_fhir_url: "{{ vault_env_fhir_url }}"

# Default Sample FHIR ID
env_django_default_sample_fhir_id: "-20140000008325"

### S3 Bucket Settings:
## TEST
env_s3_storage_bucket_name: "{{ vault_env_s3_storage_bucket_name }}"

### Django Settings:
env_django_app_title: "Blue Button 2.0 [TEST]"

### Application LOGO image settings:
# Note: The size is in KB (kilobytes)
env_django_app_logo_size_max: "100"
env_django_app_logo_width_max: "256"
env_django_app_logo_height_max: "256"

# Application label slugs to exclude from externally
# published lists, like those used for internal use testing.
env_django_app_list_exclude: "['internal-use']"

# add new url prefix for admin/
env_django_admin_redirector: "{{ vault_env_django_admin_redirector }}"

### Database Settings:
env_db_name: "{{ vault_env_db_name }}"
env_db_role: "{{ vault_env_db_role }}"
env_db_user_name: "{{ vault_env_db_user_name }}"
env_db_user_pw: "{{ vault_env_db_user_pw }}"

# Nginx cert, key and fullchain files
# Assigned Certificates and Keys to be copied to /etc/ssl/certs
env_www_cert_file: "{{ vault_env_www_cert_file }}"
env_www_key_file: "{{ vault_env_www_key_file }}"
env_www_fullchain_file: "{{ vault_env_www_fullchain_file }}"

# AppServer cert and key for communication with FHIR Server
env_app_fhir_cert: "{{ vault_env_app_fhir_cert }}"
env_app_fhir_key: "{{ vault_env_app_fhir_key }}"
env_app_fhir_cert_name: "ca.cert.pem"
env_app_fhir_key_name: "ca.key.nocrypt.pem"

# legacy values still used in roles, should be renamed for clarity
env_cf_app_tag_key_layer: "app"
env_cf_app_pyapps_pwd: "{{ vault_env_cf_app_pyapps_pwd }}"

# Service Monitoring Accounts
env_mon_nessus_user: "{{ vault_env_mon_nessus_user }}"
env_mon_nessus_pwd: "{{ vault_env_mon_nessus_pwd }}"
env_mon_nessus_pub_key: "{{ vault_env_mon_nessus_pub_key }}"

# splunk configuration
# Layer = WEB | APP | DATA | MGMT
# set the next line in the vars section of the playbook
env_splunk_group_name: "BBAPI"
# splunk_target_layer: "WEB | APP | DATA | MGMT"
env_splunk_target_layer: "TBD"
# V2 Splunk
# targetUri=10.128.11.78:8089
# v3 Splunk
# targetUri=10.244.112.51:8089
env_splunk_target_server: "10.244.112.51"
env_splunk_target_port: "8089"

#
# SLSx / Medicare.gov Authentication Integration
#
env_slsx_client_id: "{{ vault_env_slsx_client_id }}"
env_slsx_client_secret: "{{ vault_env_slsx_client_secret }}"
env_medicare_slsx_akamai_aca_token: "{{ vault_env_medicare_slsx_akamai_aca_token }}"
env_medicare_slsx_login_uri: "{{ vault_env_medicare_slsx_login_uri }}"
env_medicare_slsx_redirect_uri: "{{ vault_env_medicare_slsx_redirect_uri }}"
env_slsx_health_check_endpoint: "{{ vault_env_slsx_health_check_endpoint }}"
env_slsx_token_endpoint: "{{ vault_env_slsx_token_endpoint }}"
env_slsx_signout_endpoint: "{{ vault_env_slsx_signout_endpoint }}"
env_slsx_userinfo_endpoint: "{{ vault_env_slsx_userinfo_endpoint }}"
env_slsx_verify_ssl_internal: "{{ vault_env_slsx_verify_ssl_internal }}"
env_slsx_verify_ssl_external: "{{ vault_env_slsx_verify_ssl_external }}"

env_django_logging: |
  {
      'version': 1,
      'disable_existing_loggers': False,
      'formatters': {
          'verbose': {
              'format': '%(asctime)s %(levelname)s %(name)s '
                        '[%(process)d] %(message)s',
              'datefmt': '%Y-%m-%d %H:%M:%S'
          },
          'simple': {
              'format': '%(asctime)s %(levelname)s %(name)s %(message)s',
              'datefmt': '%Y-%m-%d %H:%M:%S'
          },
          'jsonout': {
              'format': '{"env": "test", "time": "%(asctime)s", "level": "%(levelname)s", '
                        '"name": "%(name)s", "message": %(message)s}',
              'datefmt': '%Y-%m-%d %H:%M:%S'

          }
      },
      'filters': {
          'require_debug_true': {
              '()': 'django.utils.log.RequireDebugTrue',
          },
          'require_debug_false': {
              '()': 'django.utils.log.RequireDebugFalse',
          },
      },
      'handlers': {
          'console': {
              'class': 'logging.StreamHandler',
              'formatter': 'simple',
          },
          'file_debug': {
              'level': 'DEBUG',
              'class': 'logging.FileHandler',
              'formatter': 'simple',
              'filename': '/var/log/pyapps/debug.log',
          },
          'file_error': {
              'level': 'INFO',
              'filters': ['require_debug_true'],
              'class': 'logging.FileHandler',
              'formatter': 'verbose',
              'filename': '/var/log/pyapps/error.log',
          },
          'file_info': {
              'level': 'INFO',
              'filters': ['require_debug_true'],
              'class': 'logging.FileHandler',
              'formatter': 'simple',
              'filename': '/var/log/pyapps/info.log',
          },
          'badlogin_info': {
              'level': 'INFO',
              'class': 'logging.FileHandler',
              'formatter': 'simple',
              'filename': '/var/log/pyapps/login_failed.log',
          },
          'adminuse_info': {
              'level': 'INFO',
              'class': 'logging.FileHandler',
              'formatter': 'simple',
              'filename': '/var/log/pyapps/admin_access.log',
          },
          'mail_admins': {
              'level': 'ERROR',
              'class': 'django.utils.log.AdminEmailHandler',
              'filters': ['require_debug_true'],
              'formatter': 'verbose'
          },
          'perf_mon': {
              'level': 'INFO',
              'class': 'logging.FileHandler',
              'formatter': 'jsonout',
              'filename': '/var/log/pyapps/perf_mon.log',
          }
      },
      'loggers': {
          'hhs_server': {
              'handlers': ['file_debug', 'perf_mon'],
              'level': 'DEBUG',
          },
          'hhs_oauth_server.accounts': {
              'handlers': ['file_info', 'perf_mon'],
              'level': 'DEBUG',
          },
          'hhs_server_debug': {
              'handlers': ['file_debug', 'perf_mon'],
              'level': 'DEBUG',
          },
          'hhs_server_error': {
              'handlers': ['file_error', 'mail_admins', 'perf_mon'],
              'level': 'ERROR',
          },
          'unsuccessful_logins': {
              'handlers': ['badlogin_info', 'perf_mon'],
              'level': 'INFO',
          },
          'admin_interface': {
              'handlers': ['adminuse_info', 'perf_mon'],
              'level': 'INFO',
          },
          'hhs_server_info': {
              'handlers': ['file_info', 'perf_mon'],
              'level': 'INFO',
          },
          'oauth2_provider': {
              'handlers': ['console'],
              'level': 'INFO',
          },
          'oauthlib': {
              'handlers': ['console'],
              'level': 'INFO',
          },
          'tests': {
              'handlers': ['console'],
              'level': 'DEBUG',
          },
          'audit': {
              'handlers': ['perf_mon'],
              'level': 'INFO',
          },
          'performance': {
              'handlers': ['perf_mon'],
              'level': 'INFO',
          }
      },
  }

allow_insecure_callback: true
