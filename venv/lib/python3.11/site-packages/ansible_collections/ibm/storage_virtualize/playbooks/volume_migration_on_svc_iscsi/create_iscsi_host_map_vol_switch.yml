---
- name: Using Storage Virtualize collection to migrate given volume
  hosts: localhost
  vars_files:
    - vol_migration_vars

  gather_facts: false
  vars:
    dest_vol_name: "{{ dest_vol_name if dest_vol_name is defined else src_vol_name }}"
    dest_host_name: "{{ host_name }}"
  connection: local
  tasks:
    - name: Fetch authorization token for source
      register: src_token
      ibm.storage_virtualize.ibm_svc_auth:
        clustername: "{{ src_cluster_ip }}"
        username: "{{ src_cluster_username }}"
        password: "{{ src_cluster_password }}"

    - name: Fetch authorization token for destination
      register: dest_token
      ibm.storage_virtualize.ibm_svc_auth:
        clustername: "{{ dest_cluster_ip }}"
        username: "{{ dest_cluster_username }}"
        password: "{{ dest_cluster_password }}"

    - name: Get deatils of the given volume
      register: volinfo
      ibm.storage_virtualize.ibm_svc_info:
        clustername: "{{ dest_cluster_ip }}"
        token: "{{ dest_token.token }}"
        gather_subset: [vol]
        objectname: "{{ dest_vol_name }}"
        log_path: /tmp/volinfo.debug

    - name: Get the volume UID data
      ansible.builtin.set_fact:
        vol_uid: "{{ volinfo.Volume[0]['vdisk_UID'] | lower }}"
      when: volinfo.Volume[0] is defined

    - name: Creating Host on SVC
      ibm.storage_virtualize.ibm_svc_host:
        clustername: "{{ dest_cluster_ip }}"
        token: "{{ dest_token.token }}"
        name: "{{ dest_host_name }}"
        state: present
        iscsiname: "{{ application_host_iqn }}"

    - name: Map Vdisk to host
      ibm.storage_virtualize.ibm_svc_vol_map:
        clustername: "{{ dest_cluster_ip }}"
        token: "{{ dest_token.token }}"
        state: present
        volname: "{{ dest_vol_name }}"
        host: "{{ dest_host_name }}"
        scsi: 0

    - name: Create IP provisioning
      ibm.storage_virtualize.ibm_svc_manage_ip:
        clustername: "{{ dest_cluster_ip }}"
        token: "{{ dest_token.token }}"
        log_path: /tmp/playbook.debug
        node: "{{ item.node_name }}"
        port: "{{ item.port }}"
        portset: "{{ item.portset }}"
        ip_address: "{{ item.ip_address }}"
        subnet_prefix: "{{ item.subnet_prefix }}"
        gateway: "{{ item.gateway }}"
        state: present
      loop: "{{ application_iscsi_ip }}"

    - name: Create iSCSI session
      ansible.builtin.shell: |
        ssh {{ application_host_username }}@{{ application_host_ip }}"iscsiadm --mode discovery --type sendtargets --portal {{ item.ip_address }}-l"
      loop: "{{ application_iscsi_ip }}"
      changed_when: false

    - name: Executing shell for iSCSI session
      ansible.builtin.shell: |
        ssh {{ application_host_username }}@{{ application_host_ip }}"multipath -ll"
      register: ps
      changed_when: false

    - name: Separate facts
      ansible.builtin.set_fact:
        multipath_var: "{{ ps.stdout.split('mpath') }}"

    - name: Display the multipath_var variable
      ansible.builtin.debug:
        msg: "{{ multipath_var }}"

    - name: Find vdisk UID present in host with path
      ansible.builtin.set_fact:
        dm_device: "{{ item }}"
      loop: "{{ multipath_var }}"
      when: vol_uid in item

    - name: Display the dm_device variable
      ansible.builtin.debug:
        msg: "{{ dm_device }}"

    - name: Switch replication direction of a migration relationship
      ibm.storage_virtualize.ibm_svc_manage_migration:
        relationship_name: "{{ rel_name if rel_name is defined else src_vol_name }}"
        clustername: "{{ src_cluster_ip }}"
        token: "{{ src_token.token }}"
        state: switch

    - name: Executing command through shell
      ansible.builtin.shell: |
        ssh {{ application_host_username }}@{{ application_host_ip }}"rescan-scsi-bus.sh -i --forcerescan; sleep 40;";
        ssh {{ application_host_username }}@{{ application_host_ip }}"multipath -ll"
      register: ps
      changed_when: false

    - name: Separate facts
      ansible.builtin.set_fact:
        multipath_var: "{{ ps.stdout.split('mpath') }}"

    - name: Find vdisk UID present in host with path
      ansible.builtin.set_fact:
        dm_device: "{{ item }}"
      loop: "{{ multipath_var }}"
      when: vol_uid in item

    - name: Display the dm_device variable
      ansible.builtin.debug:
        msg: "{{ dm_device }}"

    - name: Delete source volume and migration relationship
      ibm.storage_virtualize.ibm_svc_manage_migration:
        clustername: "{{ src_cluster_ip }}"
        state: cleanup
        source_volume: "{{ src_vol_name }}"
        token: "{{ src_token.token }}"
        log_path: /tmp/ansible.log

    - name: Executing shell
      ansible.builtin.shell: |
        ssh {{ application_host_username }}@{{ application_host_ip }}"rescan-scsi-bus.sh -i --forcerescan; sleep 40;";
        ssh {{ application_host_username }}@{{ application_host_ip }}"multipath -ll"
      register: ps
      changed_when: false

    - name: Separate facts
      ansible.builtin.set_fact:
        multipath_var: "{{ ps.stdout.split('mpath') }}"

    - name: Find vdisk UID present in host with path
      ansible.builtin.set_fact:
        dm_device: "{{ item }}"
      loop: "{{ multipath_var }}"
      when: vol_uid in item

    - name: Display the dm_device variable
      ansible.builtin.debug:
        msg: "{{ dm_device }}"
