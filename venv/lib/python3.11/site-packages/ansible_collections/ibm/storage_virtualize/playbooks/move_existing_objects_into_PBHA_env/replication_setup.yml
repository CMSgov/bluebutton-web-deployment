- name: Get pool info
  register: pool_info
  ibm.storage_virtualize.ibm_svc_info:
    clustername: "{{ clusters[1].cluster_ip }}"
    username: "{{ clusters[1].cluster_username }}"
    password: "{{ clusters[1].cluster_password }}"
    log_path: "{{ log_path | default('ansiblePB.log') }}"
    gather_subset: "pool"
    objectname: "{{ clusters[1].pool_name }}"

- name: Set replication pool link UID
  ansible.builtin.set_fact:
    uid: "{{ pool_info.Pool.replication_pool_link_uid }}"

- name: Get primary cluster id info
  register: partnership_info
  ibm.storage_virtualize.ibm_svc_info:
    clustername: "{{ clusters[0].cluster_ip }}"
    username: "{{ clusters[0].cluster_username }}"
    password: "{{ clusters[0].cluster_password }}"
    log_path: "{{ log_path | default('ansiblePB.log') }}"
    gather_subset: "partnership"

- name: Set primary cluster's cluster id
  ansible.builtin.set_fact:
    clusterid1: "{{ item.id }}"
  loop: "{{ partnership_info.Partnership }}"
  when: item.name == clusters[0].cluster_name

- name: Set secondary cluster's cluster id
  ansible.builtin.set_fact:
    clusterid2: "{{ item.id }}"
  loop: "{{ partnership_info.Partnership }}"
  when: item.name == clusters[1].cluster_name

- name: Set replication pool link UID on primary cluster
  ibm.storage_virtualize.ibm_svc_mdiskgrp:
    clustername: "{{ clusters[0].cluster_ip }}"
    username: "{{ clusters[0].cluster_username }}"
    password: "{{ clusters[0].cluster_password }}"
    log_path: "{{ log_path | default('ansiblePB.log') }}"
    name: "{{ clusters[0].pool_name }}"
    state: "present"
    replicationpoollinkuid: "{{ uid }}"
    replication_partner_clusterid: "{{ clusterid2 }}"

- name: Create HA replication policy between 2 io-groups residing on 2 different clusters
  ibm.storage_virtualize.ibm_sv_manage_replication_policy:
    clustername: "{{ clusters[0].cluster_ip }}"
    username: "{{ clusters[0].cluster_username }}"
    password: "{{ clusters[0].cluster_password }}"
    log_path: "{{ log_path | default('ansiblePB.log') }}"
    name: "{{ ha_policy_name }}"
    topology: "2-site-ha"
    location1system: "{{ clusterid1 }}"
    location1iogrp: "{{ clusters[0].io_grp }}"
    location2system: "{{ clusterid2 }}"
    location2iogrp: "{{ clusters[1].io_grp }}"
    state: "present"
