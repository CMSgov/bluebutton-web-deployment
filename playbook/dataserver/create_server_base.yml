---
# File: create_fips140_base.yml
# Created: 5/3/17

# Playbook to:
#  - create base Server
#  - Apply FIPS 140.2
#
# Based on: http://odecee.com.au/cloudformation-and-ansible/
# Vars file is relative to playbook file
# vars_files:
# Vars file is relative to playbook file
# Sequence:
# 1. Common variables
# 2. encrypted vault file
# 3. environment specific variables
# 4. all_vars which reference the preceding three files.
# common_ prefixes common variables
# vault_env_ prefixes encrypted variables
# env_ prefixes environment specific variables
# all_var incorporates preceding variables and defines variables without prefixes.
# use all_var variables in scripts.

- name: Provision Server
  hosts: localhost
  connection: local
  # gather_facts: False
  vars:
    env: "dev"
    azone: "az1"
    sub_zone: "data"
    sg_zone: "data"
    env_az: "{{ env }}-{{ azone }}"
    env_cf_data_version: "20"
    splunk_client_name: "BBAPI-{{ env|upper }}-DATA"
  vars_files:
    - "./../../vars/common.yml"
    - "./../../vault/env/{{ env }}/vault.yml"
    - "./../../vars/env/{{ env }}/env.yml"
    - "./../../vars/all_var.yml"

  tasks:
  - name: "launch base server for database"
    ec2:
      # connection: local
      # gather_facts: False
      # tags: provisioning
      # Necessary Variables for creating/provisioning the EC2 Instance
      #vars:
      # Adding instance_id list to see if only one server is created.
      # instance_ids: ["i-028b8fcc6eaf54779"]
      instance_type: "{{ cf_app_instance_type }}"
      # security_group:
      group: "BB-SG-{{ env|upper }}-{{ sub_zone|upper }}-ALLZONE" # Change the security group name here
      # This image should be updated monthly.
      # Current version is: EAST-RH 7-3 Gold Image V.1.09 (HVM) 04-21-2017 - ami-fdde41eb
      # EAST-RH 6-9 Gold Image V.1.01 (PV) 04-21-17 - ami-3dda452b
      # EAST-RH 6-8 Gold Image V.3.17 (PV)Splunk-CFN-FIPS140-02-24-17 (ami-f070abe6)
      image: "ami-f070abe6" # Change the AMI, from which you want to launch the server

      key_name: "{{ cf_data_key_name }}" # Change the keypair name
      region: "{{ cf_region }}"
      # tenancy must be "dedicated"
      tenancy: "dedicated"
      # DEV AZ1 DATA
      vpc_subnet_id: "{{ common_cf_subnet[env_az][env_cf_data_tag_key_layer] }}"  # "subnet-8cecfba6"
      count: 1
      # state: present
      termination_protection: yes
      # tags to instance_tags
      # Wait for desired state - so we can attach a volume
      wait: yes
      instance_tags:
        Name: "bb-{{ env }}-{{ cf_data_azone }}-{{ env_cf_data_tag_key_layer }}-{{ cf_platform_version }}"
        Stack: "BB-{{ env }}-{{ cf_data_azone }}-{{ env_cf_data_tag_key_layer }}-ansible"
        Business: "{{ cf_tags_business }}"
        Application: "{{ cf_tags_application }}"
        Environment: "{{ env|upper }}"
        ami_name: "BB-{{ env|upper }}-{{ cf_data_tag_key_layer|upper }}"
        region: "{{ cf_region }}"
        Layer:  "{{ cf_data_tag_key_layer|upper }}"
        Function: "{{ cf_data_tag_key_layer }}-{{ cf_data_database_type }}"
        Managed: "BB-MANAGED-{{ env|upper }}"
    register: data_fips_output

  - name: "Attach data volume:{{ cf_data_vol_id }}"
    ec2_vol:
       instance: "{{ item.id }}"
       volume_size: "{{ cf_data_vol_size }}"
       # id: "{{ cf_data_vol_id }}"
       device_name: "/dev/{{ cf_data_device }}"
       encrypted: yes
       region: "{{ cf_region }}"
#       tags:      ## Requires Ansible 2.3
#         Name: "bb-{{ env }}-{{ cf_data_azone }}-{{ env_cf_data_tag_key_layer }}-{{ cf_platform_version }}-DATA"
#         Stack: "BB-{{ env }}-{{ cf_data_azone }}-{{ env_cf_data_tag_key_layer }}-STORAGE"
#         Business: "{{ cf_tags_business }}"
#         Application: "{{ cf_tags_application }}"
#         Environment: "{{ env|upper }}"
#         Layer: "{{ cf_data_tag_key_layer|upper }}"
    with_items: "{{ data_fips_output.instances }}"
    register: ec2_vol

  - name: "assign just_created"
    connection: local
    set_fact:
        just_created_private_ip: "{{ data_fips_output.instances[0]['private_ip'] }}"
    register: just_created_private_ip

  - name: "What is the ip address?"
    debug:
      msg: "{{ just_created_private_ip }}"

  - name: add host to group
    add_host:
      name: "{{ data_fips_output.instances[0]['private_ip'] }}"
      groups: "just_created"

# Install postgresql
- include: build_database.yml build_target=just_created
# Setup backups
- include: ./set_backup.yml build_target=just_created


- hosts: localhost
  vars_files:
    - "./../../vars/common.yml"
    - "./../../vault/env/{{ env }}/vault.yml"
    - "./../../vars/env/{{ env }}/env.yml"
    - "./../../vars/all_var.yml"

  tasks:
  - name: "Create the ami"
    ec2_ami:
      instance_id: "{{ data_fips_output.instances[0]['id'] }}"
      region: "{{ data_fips_output.instances[0]['tags']['region'] }}"
      state: present
      description: "This was provisioned {{ ansible_date_time.iso8601 }}"
      name: "{{ data_fips_output.instances[0]['tags']['ami_name'] }}-{{ ansible_date_time.epoch }}"
      # name: "bb-{{ env }}-{{ cf_app_tag_key_layer }}-{{ ansible_date_time.epoch }}"
      wait: yes
      tags: {"name": "{{ data_fips_output.instances[0]['tags']['ami_name']|lower }}-{{ ansible_date_time.date }}"}
    register: ami_output

  - name: "create vars file with  new ami info"
    copy:
      content: |
        base_image_id: {{ ami_output.image_id }}
        base_lc_suffix: {{ ansible_date_time.epoch }}
      dest: "./../../vars/{{ env }}-{{ cf_data_tag_key_layer }}-ami-{{ cf_data_tag_key_layer }}-{{ansible_date_time.date }}.yml"
    # when: deploy is defined and deploy|bool == True


  - name: "add private_ip to /etc/ansible/hosts"
    blockinfile:
      dest: "/etc/ansible/hosts"
      marker: "# {mark} ANSIBLE MANAGED BLOCK builddb #"
      block: "[builddb]\n{{ data_fips_output.instances[0]['private_ip'] }}"
      backup: yes

  - name: "add private_ip to /etc/ansible/hosts"
    lineinfile:
      dest: "/etc/ansible/hosts"
      regexp: '\[dbservers\]'
      line: "[dbservers]\n{{ data_fips_output.instances[0]['private_ip'] }}"
      backup: yes

## Configure server to use attached volume
#  # attach_ext_drive moved to separate task in roles/prostgres/task
#  - include: ../../roles/postgres/tasks/attach_ext_drive.yml
#
