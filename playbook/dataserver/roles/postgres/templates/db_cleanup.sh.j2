#!/bin/bash
##################################################
# Cleanup local copies of Secure Postgres Backup files
# v1.0.0 6/21/2017 @ekivemark
##################################################
# /data/pgsql/9.6/data/db_cleanup.sh
# Via template hhs_ansible/roles/postgres/templates/db_cleanup.sh.j2
# Parameter: hourly daily weekly monthly
##################################################
NOW=$(date +"%Y%m%d_%H%M%S")
export PG_TEMP_DIR={{ db_server_temp_dir }}
export AWS_CONFIG_FILE=/root/.aws/config
export PG_ENVIRONMENT={{ cf_data_tag_key_stack }}
export DB_TABLE_NAME={{ db_server_table_name }}
export PG_DATA_DIR={{ db_server_data_dir }}

# Log that the cleanup process has started
echo "Postgres cleanup: $NOW in $PG_TEMP_DIR started:$NOW " >>$PG_TEMP_DIR/cleanup.log
cd $PG_TEMP_DIR

# Get the list from S3 for mode $1
/usr/local/bin/aws s3 ls  s3://bb-dbback-$PG_ENVIRONMENT/$1/ >$PG_TEMP_DIR/cleanup.s3.list.tmp

# Get the local list of backups
if [ -f "*.ssl" ]; then
   ls -la *.ssl >$PG_TEMP_DIR/cleanup.local.list.tmp

   for mvfile in $PG_TEMP_DIR/$DB_TABLE_NAME.$1_*
   do
     # Move the file to S3
     # echo "moving $mvfile to S3"
     /usr/local/bin/aws s3 mv $mvfile  s3://bb-dbback-$PG_ENVIRONMENT/$1/
     # echo "S3 Bucket content:"
     # /usr/local/bin/aws s3 ls s3://bb-dbback-$PG_ENVIRONMENT/$1/
     if [ -f "$mvfile" ]; then
        echo "File $mvfile  move to S3 failed" >>$PG_TEMP_DIR/cleanup.log"
        echo "$mvfile move failed"
     else
        echo "File $mvfile was moved to S3 OK" >>$PG_TEMP_DIR/cleanup.log"
        echo "$mvfile moved."
     fi
   done

else
   echo "no backup files to process" >$PG_TEMP_DIR/cleanup.local.list.tmp
fi

# Log that Postgres cleanup process has completed
NOW_ENDED=$(date +"%Y%m%d_%H%M%S")
echo "Postgres cleanup: $NOW in $PG_TEMP_DIR ended:$NOW_ENDED "  >>$PG_TEMP_DIR/cleanup.log

