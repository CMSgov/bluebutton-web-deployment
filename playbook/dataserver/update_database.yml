---
# File: playbook/dataserver/update_database.yml
# Created: 5/31/17
# Author: '@ekivemark'

# Playbook to:
# Update database configuration
# Synchronize settings with Appserver
# Port used
# User Account
# User Password
# Table Name
#
# Based on: http://odecee.com.au/cloudformation-and-ansible/
# Vars file is relative to playbook file
# vars_files:
# Vars file is relative to playbook file
# Sequence:
# 1. Common variables
# 2. encrypted vault file
# 3. environment specific variables
# 4. all_vars which reference the preceding three files.
# common_ prefixes common variables
# vault_env_ prefixes encrypted variables
# env_ prefixes environment specific variables
# all_var incorporates preceding variables and defines variables without prefixes.
# use all_var variables in scripts.

- name: Update Database server
  hosts: "dbservers"
  # connection: local
  remote_user: ec2-user
  become_user: root
  become: yes
  gather_facts: True
  vars:
    ansible_ssh_pipelining: no
  vars_files:
    - "./../../vars/common.yml"
    - "./../../vault/env/{{ env }}/vault.yml"
    - "./../../vars/env/{{ env }}/env.yml"
    - "./../../vars/all_var.yml"

  tasks:
  - name: "Update pg_hba.conf with app layer addresses"
    become_user: root
    become: yes
    lineinfile:
      owner: "{{ db_server_account }}"
      group: "{{ db_server_account }}"
      dest: "{{ db_server_data_dir }}/pg_hba.conf"
      line: "host all all {{ item }}  password "
      backup: yes
    with_items:
      - "{{ cf_env_layer[env]['az1']['app'] }}"
      - "{{ cf_env_layer[env]['az2']['app'] }}"
      - "{{ cf_env_layer[env]['az3']['app'] }}"
      - "{{ cf_env_layer[env]['az1']['data'] }}"
      - "{{ cf_env_layer[env]['az2']['data'] }}"
      - "{{ cf_env_layer[env]['az3']['data'] }}"

  - name: "Update Database port"
    become_user: root
    become: yes
    lineinfile:
      dest: "{{ db_server_data_dir }}/postgresql.conf"
      owner: "{{ db_server_account }}"
      group: "{{ db_server_account }}"
      regexp: "^port = "
      line: "port = {{ db_host_port }}"
      backrefs: yes
      backup: yes

  - name: "listen to anything"
    become_user: root
    become: yes
    lineinfile:
      dest: "{{ db_server_data_dir }}/postgresql.conf"
      owner: "{{ db_server_account }}"
      group: "{{ db_server_account }}"
      regexp: "^listen_addresses ="
      line: "listen_addresses = '*'"
      backrefs: yes
      backup: yes

  - name: Start PostgreSQL and enable at boot
    service:
      name: postgresql
      enabled: yes
      state: restarted

  - include: roles/alter_user/tasks/main.yml

  - include: ../../roles/postgres/tasks/pgpass.yml
