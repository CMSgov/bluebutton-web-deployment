---
# File: playbook/mgmtserver/roles/root_cert/tasks/main.yml
# Created: 6/15/17
# Author: '@ekivemark'

# Create Root Key and sign the root certificate
# Install

- name: "Ensure openssl is installed"
  yum:
    name: openssl
    state: latest

- name: "Delete ca-certs directory"
  file:
    path: "{{ item }}"
    state: absent
    owner: root
    group: root
  with_items:
  - "{{ ca_certs_dir }}"

- name: "Make configuration directories"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: root
    group: root
  with_items:
  - "{{ ca_certs_dir }}"
  - "{{ ca_certs_dir }}/certs"
  - "{{ ca_certs_dir }}/crl"
  - "{{ ca_certs_dir }}/newcerts"
  - "{{ ca_certs_dir }}/private"

- name: "Deploy configuration items"
  template:
    src: "./../../templates/mgmtserver/{{ item }}.j2"
    dest: "{{ ca_certs_dir }}/{{ item }}"
    owner: root
    group: root
  with_items:
  - serial
  - ca.conf

# Set Commonname to Fully Qualified Domain Name/IP address or to email.
- name: "set CA_SUBJECT var using email"
  set_fact:
    ca_subject: '/C={{ ca_country }}/ST={{ ca_state }}/L={{ ca_locality }}/O={{ ca_organization }}/OU={{ ca_organizationalunit }}/CN={{ ca_commonname }}/emailAddress={{ ca_email }}'
  when: ca_subject is not defined and ca_email is not ""

- name: "set CA_SUBJECT var using commonname"
  set_fact:
    ca_subject: '/C={{ ca_country }}/ST={{ ca_state }}/L={{ ca_locality }}/O={{ ca_organization }}/OU={{ ca_organizationalunit }}/CN={{ ca_commonname }}'
  when: ca_subject is not defined and ca_commonname is not ""



# CA root ca password
- name: "Generate private key and Create root CA files"
  shell: "{{ item }}"
  args:
    chdir: "{{ ca_certs_dir }}"
  with_items:
  - "openssl genrsa -out {{ ca_key }} 2048"
  - "openssl req -config {{ ca_certs_dir }}/ca.conf -new -key {{ ca_key }} -x509 -days 1825 -out {{ ca_cert }} -passin pass:{{ ca_rootca_password }} -subj \"{{ ca_subject }}\""



#- name: "Create a root key"
#  become_user: root
#  become: yes
#  shell: |
#    cd /root/ca
#    echo {{ ca_rootca_password }}> /root/ca/{{ env }}_passphrase.txt
#    openssl genrsa -aes256 -out private/{{ env }}_db_root_ca.key -passout file:/root/ca/{{ env }}_passphrase.txt 2048
#
#- name: "Sign the root "
#  become_user: root
#  become: yes
#  shell: |
#    cd /root/ca
#    export CA_ROOT_INP=/root/ca
#    echo "US" >$CA_ROOT_INP/{{ env }}_cert_in.txt
#    echo "Maryland" >>$CA_ROOT_INP/{{ env }}_cert_in.txt
#    echo "Baltimore" >>$CA_ROOT_INP/{{ env }}_cert_in.txt
#    echo "Centers for Medicare and Medicaid Services" >>$CA_ROOT_INP/{{ env }}_cert_in.txt
#    echo "BlueButton on FHIR API Root CA" >>$CA_ROOT_INP/{{ env }}_cert_in.txt
#    echo "BlueButton Root CA" >>$CA_ROOT_INP/{{ env }}_cert_in.txt
#    echo "mark.scrimshire@cms.hhs.gov" >>$CA_ROOT_INP/{{ env }}_cert_in.txt
#    echo " " >>$CA_ROOT_INP/{{ env }}_cert_in.txt
#    openssl req -config ./openssl.cnf -key private/{{ env }}_db_root_ca.key -new -x509 -days 10950 -sha256 -extensions v3_ca -out certs/{{ env }}_db_root_ca.cert.pem <$CA_ROOT_INP/{{ env }}_cert_in.txt
#
