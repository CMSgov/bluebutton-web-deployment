---
# File: playbook/mgmtserver/build_ansible.yml
# Created: 5/22/17
# Author: '@ekivemark'

# take a new server in the mgmt zone and setup to use ansible
# provide extra-vars 'env=[environment] build_target=[server_ip_address]'

# CURRENT: EAST-RH 7-3 Gold Image V.1.13 (HVM) 07-19-17 - ami-10bdab06
# Type: m3.medium
# Subnet: Mgmt Zone AZ2
# PROD Volume Size: 100GB

- name: "Build Ansible Server"
  hosts: "{{ build_target }}"
  become_user: "{{ remote_admin_account }}"
  remote_user: ec2-user
  become: yes
  connection: smart
  vars:
    # set a default environment. We don't mind mucking with the dev or test environment
    env: "test"
    # splunk_target_layer: "WEB | APP | DATA | MGMT"
    splunk_target_layer: "MGMT"
    ansible_ssh_pipelining: no
    hhs_ansible_git_branch: master
    hhs_ansible_repo: "https://github.com/HHSIDEALab/hhs_ansible.git"
    # certificate files for certs process
    ca_key: "server.key"
    ca_cert: "server.crt"

  vars_files:
    - "./../../vars/common.yml"
    - "./../../vault/env/{{ env }}/vault.yml"
    - "./../../vars/env/{{ env }}/env.yml"
    - "./../../vars/all_var.yml"
    # - ../vars/all_vars.yml
    # - ../../vars/playbook/template_envvars.yml
    # Load certificate values
    # ca_commonname is empty - this needs to be set to server name
    - "./../../vars/env/{{ env }}/ca_env.yml"


  roles:
    - ../../roles/splunk
    - ../appserver/roles/app_tools
    - root_cert
    - letsencrypt_mgmt_certstore

  tasks:
  - debug:
      msg: "Environment = {{ env }}, Target = {{ build_target }}"

  # Setup logging
  - import_tasks: "roles/add_logging/tasks/main.yml"

  - name: "setup folders"
    become_user: "{{ remote_admin_account }}"
    become: yes
    file:
      dest: "/root/.ansible-vault"
      state: directory
      owner: root
      group: root
      mode: "0600"
    register: create_vault

  - debug:
      msg: "{{ create_vault.stdout | default(omit) }}"

  - name: "yum installs"
    become_user: "{{ remote_admin_account }}"
    become: yes
    yum:
      name: "{{ item }}"
      state: installed
    with_items:
      - python-pip
      - git
      - python-boto

  - name: "Upgrade pip"
    shell: "pip install --upgrade pip"
    register: pip_upgrade
    ignore_errors: yes

  - name: "pip installs with optional version"
    become_user: "{{ remote_admin_account }}"
    become: yes
    # ansible==2.2.1.0 (previous)
    # ansible==2.4.1.0
    # awscli==1.11.86 (previous)
    # awscli==1.12.1
    pip:
      name: "{{ item.name }}"
      version: "{{ item.version | default(omit) }}"
      # extra_args needed if FIPS is enabled
      extra_args: " {{ pip_extra_args }} "
    with_items:
      - name: ansible
        version: 2.4.1.0
      - name: awscli
        version: 1.12.1
      - name: setuptools
        version: 35.0.2
      - name: pyOpenSSL
        version: 17.4.0
      - name: acme-tiny
        version: 2.0.0

#  - name: "install hhs_ansible"
#    shell: "mkdir -p /hhs_ansible ; cd /hhs_ansible ; git clone https://github.com/HHSIDEALab/hhs_ansible "

    ########################################
  - name: "Check for git installation"
    become_user: "{{ remote_admin_account }}"
    become: yes
    stat:
      path: "/hhs_ansible/hhs_ansible/.git/*"
    register: git_installed

  - name: "Check result of git check"
    debug:
      msg: "git is installed [{{ git_installed.stat.exists }}]"
    ignore_errors: yes

  - name: "install from git: hhs_ansible branch:{{ hhs_ansible_git_branch }}"
    become_user: "{{ remote_admin_account }}"
    become: yes
    git:
      repo: "{{ hhs_ansible_repo }}"
      dest: "/hhs_ansible/hhs_ansible"
      force: yes
      clone: yes
    when: not git_installed.stat.exists

  # Now pull a specific branch
  - name: "update from git: hhs_ansible branch:{{ hhs_ansible_git_branch }}"
    become_user: "{{ remote_admin_account }}"
    become: yes
    git:
      repo: "{{ hhs_ansible_repo }}"
      dest: "/hhs_ansible/hhs_ansible"
      version: "{{ hhs_ansible_git_branch }}"


  - name: "Setup go_ansible script"
    template:
      src: "../../templates/mgmtserver/{{ env }}/go_ansible.sh.j2"
      dest: "/home/{{ remote_user_account }}/go_ansible"
      mode: "0770"
      owner: "{{ remote_user_account }}"
      group: "{{ remote_user_account }}"

  - name: "create folder for ansible-vault"
    file:
      dest: "/root/.ansible-vault"
      state: directory
      owner: root
      group: root
      mode: "0600"

  - name: "create folder for .ec2"
    file:
      dest: "/root/.ec2"
      state: directory
      owner: root
      group: root
      mode: "0600"

  - name: "create folder for .aws configuration"
    file:
      dest: "/root/.aws"
      state: directory
      owner: root
      group: root
      mode: "0600"

  - name: "Copy ansible setup script"
    template:
      src: "../../templates/mgmtserver/{{ env }}/setup_ansible.sh.j2"
      dest: "/home/{{ remote_user_account }}/setup_ansible"
      mode: "0770"
      owner: "{{ remote_user_account }}"
      group: "{{ remote_user_account }}"

