---
# File: playbook/appherd/100_create_appserver.yml
# Created: 11/27/17

# Playbook to:
#  - create Python3/Django AppServer
#  - add to /etc/ansible/hosts file [appservers]
#

# Based on: http://odecee.com.au/cloudformation-and-ansible/
# Vars file is relative to playbook file
# vars_files:
# Vars file is relative to playbook file
# Sequence:
# 1. Common variables
# 2. encrypted vault file
# 3. environment specific variables
# 4. all_vars which reference the preceding three files.
# common_ prefixes common variables
# vault_env_ prefixes encrypted variables
# env_ prefixes environment specific variables
# all_var incorporates preceding variables and defines variables without prefixes.
# use all_var variables in scripts.



- name: Provision Appserver
  hosts: localhost
  connection: local
  # gather_facts: False
  vars:
    env: "dev"
    azone: "az1"
    sub_zone: "app"
    sg_zone: "appserver"
    env_az: "{{ env }}-{{ azone }}"
    env_cf_data_version: "20"
    # splunk_target_layer: "WEB | APP | DATA | MGMT"
    splunk_target_layer: "{{ sub_zone|upper }}"
    ami_release: "2017-05-11"
  vars_files:
    - "./../../vars/common.yml"
    - "./../../vault/env/{{ env }}/vault.yml"
    - "./../../vars/env/{{ env }}/env.yml"
    - "./../../vars/all_var.yml"
    # - "./../../var/{{ env }}-{{ sub_zone }}-ami-{{ ami_release }}.yml"
    # cf_platform_version is used in name: update in env.yml to
    # reflect script release iteration

  tasks:
  - name: "Create Base EC2 machine to build appserver"
    ec2:
      # connection: local
      # gather_facts: False
      # tags: provisioning
      # Necessary Variables for creating/provisioning the EC2 Instance
      #vars:
      # Adding instance_id list to see if only one server is created.
      # instance_ids: ["i-028b8fcc6eaf54779"]
      #
      # Choose size in env.yml: m3.medium or larger.
      #
      instance_type: "{{ cf_app_instance_type }}"
      # security_group:
      # We use a standard security group for all APPServers for easier management
      # eg. BB-SG-ENV-APP-ALLZONE
      group: "BB-SG-{{ env|upper }}-{{ sg_zone|upper }}-ALLZONE" # Change the security group name here
      # This image should be updated monthly.
      # Current version is: EAST-RH 7-3 Gold Image V.1.09 (HVM) 04-21-2017 - ami-fdde41eb
      # EAST-RH 6-9 Gold Image V.1.01 (PV) 04-21-17 - ami-3dda452b
      # EAST-RH 6-8 Gold Image V.3.17 (PV)Splunk-CFN-FIPS140-02-24-17 (ami-f070abe6)
      # EAST-RH 7-3 Gold Image V.1.10 (HVM) 05-18-17 - ami-3aff872c (previous)
      # V1.15 turns on FIPS by default.
      # EAST-RH 7-4 Gold Image V.1.15 (HVM) 11-2-17 - ami-5a6ac120
      # (EAST-RH 7-4 Gold Image V.1.16 (HVM) 11-17-17) - ami-7096140a
      image: "{{ ami_app_gold_image }}" # Change the AMI, from which you want to launch the server
      # We are using a common key name across all appservers at this time.
      # This could be a future enhancement to the inventory capability
      key_name: "{{ cf_app_key_name }}" # Change the keypair name
      region: "{{ aws_region }}"
      # tenancy must be "dedicated"
      tenancy: "dedicated"
      # Map the vpc_subnet_id in common.yml using
      # env: dev | test | impl | prod
      # azone: az1 | az2 | az3
      # cf_app_tag_key_layer: dmz | web | app | data
      #
      vpc_subnet_id: "{{ common_cf_subnet[env_az][env_cf_app_tag_key_layer] }}"  # "subnet-80ecfbaa"
      # How many machines - we default to 1
      count: 1
      # state: present
      # Termination Protection: Avoid accidental termination
      termination_protection: yes
      # Wait for desired state
      wait: yes
      wait_timeout: 500
#      volumes:
#        - device_name: "{{ app_extra_volume_1.src }}"
#          volume_size: "{{ app_extra_volume_1.size }}"
#          volume_type: "{{ app_extra_volume_1.vol_type }}"
#          encrypted: "{{ app_extra_volume_1.encrypted }}"
#        - device_name: "{{ app_extra_volume_2.src }}"
#          volume_size: "{{ app_extra_volume_2.size }}"
#          volume_type: "{{ app_extra_volume_2.vol_type }}"
#          encrypted: "{{ app_extra_volume_2.encrypted }}"

      # tags to instance_tags
      instance_tags:
        Name: "bb-{{ env }}-{{ azone }}-{{ env_cf_app_tag_key_layer }}-{{ cf_platform_version }}"
        Stack: "BB-{{ env|upper }}-{{ cf_app_azone|upper }}-{{ cf_app_tag_key_layer|upper }}-ANSIBLE"
        Business: "{{ cf_tags_business }}"
        Application: "{{ cf_tags_application }}"
        Environment: "{{ env|upper }}"
        Function: "{{ cf_app_tag_key_layer }}-AppServer"
        Layer:  "{{ cf_app_tag_key_layer|upper }}"
        ami_name: "BB-{{ env|upper }}-{{ cf_app_tag_key_layer|upper }}"
        region: "{{ cf_region }}"
        Managed: "BB-MANAGED-{{ env|upper }}"
    register: app_ec2_output

  - name: "Add ec2 volume {{ app_extra_volume_1.src }} for {{ app_extra_volume_1.path }}"
    ec2_vol:
      instance: "{{ item.id }}"
      region: "{{ aws_region }}"
      device_name: "{{ app_extra_volume_1.src }}"
      volume_size: "{{ app_extra_volume_1.size }}"
      volume_type: "{{ app_extra_volume_1.vol_type }}"
      encrypted: "{{ app_extra_volume_1.encrypted }}"
      name: "BB-{{ env }}-{{ cf_app_azone }}-{{ env_cf_app_tag_key_layer }}-{{ cf_platform_version }}-VOL-{{ app_ec2_output.instances[0]['private_ip'] }}-{{ app_extra_volume_1.path }}"
    with_items: "{{ app_ec2_output.instances }}"
    register: ec2_vol_1

  - name: "Add ec2 volume {{ app_extra_volume_2.src }} for {{ app_extra_volume_2.path }}"
    ec2_vol:
      instance: "{{ item.id }}"
      region: "{{ aws_region }}"
      device_name: "{{ app_extra_volume_2.src }}"
      volume_size: "{{ app_extra_volume_2.size }}"
      volume_type: "{{ app_extra_volume_2.vol_type }}"
      encrypted: "{{ app_extra_volume_2.encrypted }}"
      name: "BB-{{ env }}-{{ cf_app_azone }}-{{ env_cf_app_tag_key_layer }}-{{ cf_platform_version }}-VOL-{{ app_ec2_output.instances[0]['private_ip'] }}-{{ app_extra_volume_2.path }}"
    with_items: "{{ app_ec2_output.instances }}"
    register: ec2_vol_2

#  - name: "mount {{ app_extra_volume_1.path }}"
#    mount:
#      instance: "{{ item.id }}"
#      path: "{{ app_extra_volume_1.path }}"
#      src: "{{ app_extra_volume_1.src }}"
#      fstype: "{{ app_extra_volume_1.fstype }}"
#      state: present
#    with_items: "{{ app_ec2_output.instances }}"
#
#  - name: "mount {{ app_extra_volume_2.path }}"
#    mount:
#      instance: "{{ item.id }}"
#      path: "{{ app_extra_volume_2.path }}"
#      src: "{{ app_extra_volume_2.src }}"
#      fstype: "{{ app_extra_volume_2.fstype }}"
#      state: present
#    with_items: "{{ app_ec2_output.instances }}"

  - name: waiting for ssh to start
    wait_for:
      port: 22
      host: "{{ app_ec2_output.instances[0]['private_ip'] }}"
      timeout: 300
      search_regex: OpenSSH

#  - name: "Create filesystem on {{ app_extra_volume_1.src }} "
#    connect: "{{ app_ec2_output.instances[0]['private_ip'] }}"
#    remote_user: ec2-user
#    become_user: "{{ remote_admin_account }}"
#    become: yes
#    filesystem:
#      fstype: "{{ app_extra_volume_1.fstype }}"
#      dev: "{{ app_extra_volume_1.src }}"
#
#  - name: "Create filesystem on {{ app_extra_volume_2.src }} "
#    connect: "{{ app_ec2_output.instances[0]['private_ip'] }}"
#    remote_user: ec2-user
#    become_user: "{{ remote_admin_account }}"
#    become: yes
#    filesystem:
#      fstype: "{{ app_extra_volume_2.fstype }}"
#      dev: "{{ app_extra_volume_2.src }}"
#

  - name: "add host to group: just_created ( {{ app_ec2_output.instances[0]['private_ip'] }} ) "
    add_host:
      name: "{{ app_ec2_output.instances[0]['private_ip'] }}"
      groups: "just_created"

  - name: "add private_ip to /etc/ansible/hosts"
    lineinfile:
      dest: "/etc/ansible/hosts"
      regexp: '\[appservers-base\]'
      line: "[appservers-base]\n{{ app_ec2_output.instances[0]['private_ip'] }}\n"
      backup: yes

#  - name: "add private_ip to /etc/ansible/hosts"
#    lineinfile:
#      dest: "/etc/ansible/hosts"
#      regexp: '\[appservers\]'
#      line: "[appservers]\n{{ app_ec2_output.instances[0]['private_ip'] }}"
#      backup: yes
#
