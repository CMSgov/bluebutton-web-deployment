---
# File: playbook/appherd/2_build_appserver.yml
# Created: 5/9/17
# Author: '@ekivemark'

# Playbook to:
#  - create Python3/Django AppServer
#  - Take base server in appservers-base and configure

#
# Based on: http://odecee.com.au/cloudformation-and-ansible/
# Vars file is relative to playbook file
# vars_files:
# Vars file is relative to playbook file
# Sequence:
# 1. Common variables
# 2. encrypted vault file
# 3. environment specific variables
# 4. all_vars which reference the preceding three files.
# common_ prefixes common variables
# vault_env_ prefixes encrypted variables
# env_ prefixes environment specific variables
# all_var incorporates preceding variables and defines variables without prefixes.
# use all_var variables in scripts.

# new base machines will be in appservers-base in /etc/ansible/hosts
# add all the base software and move the server to appservers and
# remove from appservers-base

- name: Build App Server
  # hosts: appservers-base
  hosts: "{{ build_target | default('appservers-base') }}"
  # connection: local
  remote_user: ec2-user
  # become_user: root
  # become: yes
  gather_facts: True
  vars:
    ansible_ssh_pipelining: no
    # The variables in this section can all be overridden in the vars_files
    # that follow
    env: "test"
    azone: "az1"
    sub_zone: "app"
    sg_zone: "appserver"
    env_az: "{{ env }}-{{ azone }}"
    env_cf_app_version: "01"
    # splunk_target_layer: "WEB | APP | DATA | MGMT"
    splunk_target_layer: "{{ sub_zone|upper }}"
    migrate: "yes"
    collectstatic: "yes"
    # Setting the playbook value for SNS Notifications
    sns_playbook: "playbook/appserver/build_appserver.yml"
    sns_subject: "rebuild appserver"
    sns_playbook_action: "rebuild"
    sns_debug: false
  vars_files:
    - "./../../vars/common.yml"
    - "./../../vault/env/{{ env }}/vault.yml"
    - "./../../vars/env/{{ env }}/env.yml"
    - "./../../vars/all_var.yml"

  # ../../roles/ points to roles stored in roles at the top level
  # - roles/ indicates the role is in this playbook directory

  roles:
    # Apply basic updates
    # fix sudoers file
    # apply yum upgrades
    # check the sshd config
    # reboot and wait if reboot required
    - ../../roles/base_patch

    # Check SELINIUX set to permissive
    # set state based on var/env.yml
    # reboot and wait if changed
    - roles/selinux_state

    # setup aws config and credentials
    # needed for writing static content to S3
    - roles/aws_config

    # Install AppServer tools
    # compiler and supporting libraries
    # upgrade pip
    # upgrade aws cli tool
    - roles/app_tools

    # Create the pyapps user
    # used to run the appserver python/django application
    - roles/app_user

    # Create the pyapps logs
    # Group ownership must go to logreader to enable splunk log capture
    - roles/app_logs

    # Change Server ID for Splunk
    # uses splunk_name_mapper
    # added appservers-base to splunk_name_mapper
    # get last octet of ip address to append to client name
    - ../../roles/splunk

    # Install Python3.4
    # Python3.4 is installed as part of RHEL 7.4
    # default to Python3.4 to use pre-compiled Python
    # Python3.5/6 are part of slective developer repositories (rh-python35
    # and rh-python36)
    - roles/python34

    # Install Apache
    # set /var/log/httpd to group ownership = logreader
    - roles/apache

    # Create apache cert_store
    # create directory in /etc/httpd/ssl/certs
    - roles/create_apache_cert_store


    # Letsencrypt is not working in FIPS Enabled environment

    #    # Setup Lets encrypt
    #    - roles/letsencrypt_install
    #    # Run Letsencrypt
    #    - roles/letsencrypt_run_1
    #    # install the certs
    #    - roles/letsencrypt_cert_copy

    # install swagger-ui from git
    # Used to present api documentation
    - roles/swagger_ui_install

    # prepare the folders for app install and log files
    - roles/app_prep

    ###################################
    # Update application code and write virtualhosts file
    - roles/app_update

    # Setup logrotate rules for pyapps
    # Ensure logs belong to group: logreader
    - roles/log_rotate

    # Update environment variable files
    - roles/app_update_env

    ################################################
    ################################################
    ################################################

    # # install mod_wsgi
    # See if we can move mod_wsgi to pip install into virtual env
    # - roles/mod_wsgi

    # django migrate and collectstatic
    - roles/django_prep
    # Set permissions for app under selinux
    - roles/semanage_apps
    # Set permissions for virtualenv under selinux
    - roles/semanage_virtualenv


  tasks:
  - include: ../../roles/base_patch/tasks/fix_sudoers.yml
  ## Switch default ssl.conf off
  # - include: roles/apache/tasks/ssl_off.yml
  - include: ../../roles/base_patch/tasks/update_packages.yml
  - include: roles/create_superuser/tasks/main.yml
  # - include: ../../roles/app_env/tasks/refresh_app.yml
  - include: ../platform/rewrite_hosts.yml

  - name: "Update Ansible hosts file"
    connection: local
    blockinfile:
      dest: "/etc/ansible/hosts"
      marker: "# {mark} ANSIBLE MANAGED BLOCK buildapp #"
      content: ""

  - name: make sure apache server is running
    service:
      name: httpd
      state: started
      enabled: yes

  - name: "Restart Apache on {{ env }}"
    action: shell /bin/echo $HOSTNAME
    notify:
      - restart apache

  - name: "Add in to Load Balancer"
    include: roles/attach_to_elb/tasks/main.yml

  - name: "Notify completion result"
    include: "../../roles/send_notification/tasks/main.yml"

  handlers:
  - name: restart apache
    service: name=httpd state=restarted


  # Now We should have a working machine
  # Apache / Mod_Wsgi / Python3

