from .base import *
import os
import socket
from getenv import env
from ..utils import bool_env

#
# Written by Ansible /playbook/appherd/roles/create_env_settings
# Overrides base.py with environment specific settings
#
# If a setting needs to vary by environment it should be added to the
# env.yml file for each environment and referenced in this file by
# the parent variable in all_var.yml
#

# http://www.miniwebtool.com/django-secret-key-generator/
SECRET_KEY = "{{ django_secret_key }}"
DEBUG = {{ django_debug }}
ENV_SPECIFIC_APPS = {{ django_environment_apps }}
INSTALLED_APPS += ENV_SPECIFIC_APPS
OPTIONAL_INSTALLED_APPS += {{ django_optional_installed_apps }}
CORS_ORIGIN_ALLOW_ALL = {{ django_cors_origin_allow_all }}

# database configuration - Postgres
DATABASES_DEFAULT = "{{ db_platform_type }}://{{ db_user_name }}:{{ db_user_pw }}@{{ db_host_address }}:{{ db_host_port }}/{{ db_name }}{{ db_host_options }}"

DATABASES = {
    'default': dj_database_url.config(default=DATABASES_DEFAULT),
}

# AWS Credentials need to support SES, SQS and SNS
AWS_ACCESS_KEY_ID = '{{ aws_access_id }}'
AWS_SECRET_ACCESS_KEY = '{{ aws_secret_key }}'

# static files and media
# Don't use BASE_DIR because for Production Environments
# Static Files may be located on an entirely different server.
# But the default can be BASE_DIR Setting
ASSETS_ROOT = "{{ install_root }}/{{ project_name }}"

AWS_STORAGE_BUCKET_NAME = '{{ s3_storage_bucket_name }}'
AWS_S3_CUSTOM_DOMAIN = 's3.amazonaws.com/%s' % AWS_STORAGE_BUCKET_NAME

STATICFILES_LOCATION = '/static/'
STATICFILES_STORAGE = 'hhs_oauth_server.s3_storage.StaticStorage'
STATIC_URL = "https://%s%s" % (AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)

MEDIAFILES_LOCATION = '/media/'
DEAFULT_FILE_STORAGE = 'hhs_oauth_server.s3_storage.MediaStorage'
MEDIA_URL = "https://%s%s" % (AWS_S3_CUSTOM_DOMAIN, MEDIAFILES_LOCATION)

STATIC_ROOT = os.path.join(ASSETS_ROOT, 'collectedstatic')
MEDIA_ROOT = os.path.join(ASSETS_ROOT, 'media')

# If using AWS SES, the email below must first be verified.
DEFAULT_FROM_EMAIL = "{{ django_from_email }}"
# The console.EmailBackend backend prints to the console.
# Redefine this for SES or other email delivery mechanism
EMAIL_BACKEND_DEFAULT = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND ="{{ django_email_backend }}"

APPLICATION_TITLE = "{{ django_app_title }}"

HOSTNAME_URL = "{{ host_url }}"
INVITE_REQUEST_ADMIN ='{{ django_admin_email }}'

# Set to False in NON-PRODUCTION Environments
REQUIRE_INVITE_TO_REGISTER = {{ django_require_invite_to_register }}

# To support multiple resourceType records in SupportedResourceType
# We need to have a default FHIR Server as a fallback if the Request.user
# Does not have a Crosswalk with a default FHIRServer defined.
# This variable will contain the ID of the Default FHIRServer
# in the apps.fhir.bluebutton.server.models.FHIRServer table
FHIR_SERVER_DEFAULT = {{ django_fhirserver_id }}

FHIR_SERVER_CONF = {'SERVER': "{{ ths_fhir_server }}",
                    'PATH': "{{ ths_fhir_path }}",
                    'RELEASE': "{{ ths_fhir_rel }}",
                    'REWRITE_FROM': ["{{ ths_fhir_server }}{{ ths_fhir_path }}{{ ths_fhir_rel }}",],
                    # REWRITE_FROM should be a list
                    'REWRITE_TO': "{{ ths_fhir_rewrite_to }}",
                    # Minutes until search expires
                    'SEARCH_EXPIRY': {{ ths_search_expiry }}
}

FHIR_CLIENT_CERTSTORE = os.path.join(BASE_DIR, "{{ django_fhir_certstore_relative }}" )

SIGNUP_TIMEOUT_DAYS = {{ django_signup_timeout_days }}

# Stub for Custom Authentication Backend
SLS_USER = "ben"
# enclose value for DJANGO_SLS_PASSWORD in single quotes to preserve
# special characters eg. $
# eg. export DJANGO_SLS_PASSWORD='$pecial_CharacterPre$erved'
SLS_PASSWORD = 'pbkdf2_sha256$24000$V6XjGqYYNGY7$13tFC13aaTohxBgP2W3glTBz6PSbQN4l6HmUtxQrUys='
SLS_FIRST_NAME = "Ben"
SLS_LAST_NAME = "Barker"
SLS_EMAIL = 'ben@example.com'

# emails
SEND_EMAIL = True
# If using AWS SES, the email below must first be verified.
DEFAULT_FROM_EMAIL = '{{ django_from_email }}'
DEFAULT_ADMIN_EMAIL = '{{ django_admin_email }}'

# The console.EmailBackend backend prints to the console.
# Redefine this for SES or other email delivery mechanism
EMAIL_BACKEND_DEFAULT = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = "{{ django_email_backend }}"
EMAIL_HOST = "email-smtp.us-east-1.amazonaws.com"
# SES PORT options: 25, 465, 587, 2465 or 2587.
# Port 25 is throttled
# Use port 587 or 2587 for TLS connections
# Use port 465 or 2465 for Native SSL support
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_TIMEOUT = None
EMAIL_HOST_USER = None
EMAIL_HOST_PASSWORD = None
EMAIL_SSL_KEYFILE = None
EMAIL_SSL_CERTFILE = None

# Move Admin to a variable url location
ADMIN_PREPEND_URL = "{{ django_admin_redirector }}"

#
# MyMedicare Authentication Integration
#
MEDICARE_LOGON = {{ medicare_logon }}
SLS_TOKEN_ENDPOINT = "{{ sls_token_endpoint }}"
SLS_USERINFO_ENDPOINT =  "{{ sls_userinfo_endpoint }}"
MEDICARE_LOGIN_URI = "{{ medicare_login_uri }}"
MEDICARE_REDIRECT_URI = "{{ medicare_redirect_uri }}"

SLS_VERIFY_SSL = {{ sls_verify_ssl }}

# Change these for production
USER_ID_SALT = "{{ django_user_id_salt }}"
USER_ID_HEX_STATUS = {{ django_user_id_hex_status }}
USER_ID_ITERATIONS = {{ django_user_id_iterations }}

# Fixed user and password for fake backend
SETTINGS_AUTH_USER = 'ben'
SETTINGS_AUTH_PASSWORD = 'pbkdf2_sha256$24000$V6XjGqYYNGY7$13tFC13aaTohxBgP2W3glTBz6PSbQN4l6HmUtxQrUys='

# Should be set to True in production and False in all other dev and test environments
# Replace with BLOCK_HTTP_REDIRECT_URIS per CBBP-845 to support mobile apps
# REQUIRE_HTTPS_REDIRECT_URIS = True
BLOCK_HTTP_REDIRECT_URIS = {{ django_block_http_redirect }}

OAUTH2_PROVIDER = {{ django_oauth2_provider }}
LOGGING = {{ django_logging }}
