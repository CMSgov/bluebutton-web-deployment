---
# File: playbook/appherd/200_build_appserver.yml
# Created: 5/9/17
# Author: '@ekivemark'

# Playbook to:
#  - create Python3/Django AppServer
#  - Take base server in appservers-base and configure

#
# Based on: http://odecee.com.au/cloudformation-and-ansible/
# Vars file is relative to playbook file
# vars_files:
# Vars file is relative to playbook file
# Sequence:
# 1. Common variables
# 2. encrypted vault file
# 3. environment specific variables
# 4. all_vars which reference the preceding three files.
# common_ prefixes common variables
# vault_env_ prefixes encrypted variables
# env_ prefixes environment specific variables
# all_var incorporates preceding variables and defines variables without prefixes.
# use all_var variables in scripts.

# new base machines will be in appservers-base in /etc/ansible/hosts
# add all the base software and move the server to appservers and
# remove from appservers-base

- name: Build App Server
  # hosts: appservers-base
  hosts: "{{ build_target | default('appservers-base') }}"
  # connection: local
  remote_user: ec2-user
  # become_user: "{{ remote_admin_account }}"
  # become: yes
  gather_facts: True
  vars:
    ansible_ssh_pipelining: no
    # The variables in this section can all be overridden in the vars_files
    # that follow
    env: "test"
    azone: "az1"
    sub_zone: "app"
    sg_zone: "appserver"
    env_az: "{{ env }}-{{ azone }}"
    env_cf_app_version: "01"
    # splunk_target_layer: "WEB | APP | DATA | MGMT"
    splunk_target_layer: "{{ sub_zone|upper }}"
    migrate: "yes"
    collectstatic: "yes"
    # Setting the playbook value for SNS Notifications
    sns_playbook: "playbook/appserver/build_appserver.yml"
    sns_subject: "rebuild appserver"
    sns_playbook_action: "rebuild"
    sns_debug: false
  vars_files:
    - "./../../vars/common.yml"
    - "./../../vault/env/{{ env }}/vault.yml"
    - "./../../vars/env/{{ env }}/env.yml"
    - "./../../vars/all_var.yml"

  # ../../roles/ points to roles stored in roles at the top level
  # - roles/ indicates the role is in this playbook directory

  roles:
    # Apply basic updates
    # fix sudoers file
    # apply yum upgrades
    # check the sshd config
    - ../../roles/base_patch

    # Check SELINIUX set to permissive
    # set state based on var/env.yml
    - roles/selinux_state

    # setup aws config and credentials
    # needed for writing static content to S3
    - roles/aws_config

    # Install AppServer tools
    # compiler and supporting libraries
    # upgrade pip
    # upgrade aws cli tool
    - roles/app_tools

    # Create the pyapps user
    # used to run the appserver python/django application
    - roles/app_user

    # Create the pyapps logs
    # Group ownership must go to logreader to enable splunk log capture
    - roles/app_logs

    #
    # Apply settings for CMS Enclave monitoring service (nessus, snmp, splunk, McAffee, nagios)
    #

    # Disable snmp community string if set to public
    - ../../roles/snmp_update_public

    # apply nessus public key
    - ../../roles/nessus_update_key

    #
    # Add ssh authorized keys to server from vault
    #
    - ../../roles/add_authorized_keys

    # Change Server ID for Splunk
    # uses splunk_name_mapper
    # added appservers-base to splunk_name_mapper
    # get last octet of ip address to append to client name
    - ../../roles/splunk

    # Install Python3.4
    # Python3.4 is installed as part of RHEL 7.4
    # default to Python3.4 to use pre-compiled Python
    # Python3.5/6 are part of selective developer repositories (rh-python35
    # and rh-python36)
    - roles/python34

    # Create apache cert_store
    # create directory in /etc/httpd/ssl/certs
    - roles/create_apache_cert_store

    # Install the certs to the cert_store for FHIR Backend requests
    - roles/install_fhircerts_to_store

    # Letsencrypt is not working in FIPS Enabled environment
    # create self-signed certificates for secure communication with ELB
    # - roles/create_self_signed_cert

    # Install assigned certs
    - roles/copy_issued_cert

    # Install Apache
    # set /var/log/httpd to group ownership = logreader
    - roles/apache

    # install swagger-ui from git
    # Used to present api documentation
    - roles/swagger_ui_install

    # prepare the folders for app install and log files
    - roles/app_prep

    # Update application code and write virtualhosts file
    # Download from github
    # install requirements
    - roles/app_update

    # Setup logrotate rules for pyapps
    # Ensure logs belong to group: logreader
    - roles/log_rotate

    # Update environment variable files
    - roles/app_update_env

    # Update environment settings file
    - roles/create_env_settings

    # # install mod_wsgi
    # See if we can move mod_wsgi to pip install into virtual env
    - roles/mod_wsgi

    # django migrate and collectstatic
    - roles/django_prep

    # Set permissions for app under selinux
    - roles/semanage_apps

    # Set permissions for virtualenv under selinux
    - roles/semanage_virtualenv

  tasks:
    # Make sure sudoers is working correctly
    - import_tasks: ../../roles/base_patch/tasks/fix_sudoers.yml

    # Create a super user for the python/django application
    - import_tasks: roles/create_superuser/tasks/main.yml

    - name: Gather instance metadata
      ec2_metadata_facts:

    - name: Remove the State tag from the instance
      ec2_tag:
        resource: "{{ ansible_ec2_instance_id }}"
        state: absent
        tags:
          State: "appservers-base"
      delegate_to: localhost

    - name: make sure apache server is running
      service:
        name: httpd
        state: started
        enabled: yes

    - name: "Restart Apache on {{ env }}"
      action: shell /bin/echo $HOSTNAME
      notify:
        - restart apache

    # Check if server is responding
    - name: "call with curl to localhost"
      shell: "curl -I -k https://localhost/"
      register: curl_output
      ignore_errors: yes

    - name: "Result of curl was..."
      debug:
        msg: "{{ curl_output.stdout }}"

    - name: "Reboot the instance"
      shell: /sbin/shutdown -r now
      async: 0
      poll: 0
      become_user: "{{ remote_admin_account }}"
      become: true
      ignore_errors: true

    - name: "Wait for the instance to initiate reboot"
      wait_for:
        host: "{{ ansible_ssh_host }}"
        port: 22
        state: stopped

    - name: "Wait for instance to finish reboot"
      wait_for:
        port: 22
        host: "{{ ansible_ssh_host }}"
        timeout: 300
        search_regex: OpenSSH
      delegate_to: localhost

    - name: "Add in to Loadbalancer"
      import_tasks: roles/attach_to_elb/tasks/main.yml

    - name: "Notify completion result"
      import_tasks: "../../roles/send_notification/tasks/main.yml"

  handlers:
  - name: restart apache
    become_user: "{{ remote_admin_account }}"
    become: yes
    service: name=httpd state=restarted
