---
# Playbook to move static files to S3 via collectstatic
# Run after refresh playbook

# Apply to all app servers (prime, leader, follower)
- hosts: app_prime_server,app_lead_server,app_follow_server
  # Vars file is relative to playbook file
  vars_files:
    # Vars file is relative to playbook file
  # Sequence: 1. Common variables
  # 2. encrypted vault file
  # 3. environment specific variables
  # 4. all_vars which reference the preceding three files.
  # common_ prefixes common variables
  # vault_env_ prefixes encrypted variables
  # env_ prefixes environment specific variables
  # all_var incorporates preceding variables and defines variables without prefixes.
  # use all_var variables in scripts.
  vars_files:
    - "./../../vars/common.yml"
    - "./../../vault/env/{{ env }}/vault.yml"
    - "./../../vars/env/{{ env }}/env.yml"
    - "./../../vars/all_var.yml"

  remote_user: "{{ remote_user_account }}"
  become: yes
  become_user: root
  
  tasks:
  - name: become root and activate virtualenv
    become: yes
    become_method: sudo
    become_user: root
    action: "shell source {{ venv }}/bin/activate"

  - name: switch to app folder
    action: "shell cd {{ install_root }}/{{ project_name }}/"

  - git:
      repo: "{{ project_repo }}"
      dest: "{{ install_root }}/{{ project_name }}"
      force: yes
      version: "{{ git_branch }}"

  # change ownership of files
  - file:
      path: "{{ install_root }}/{{ project_name }}/"
      recurse: yes
      owner: pyapps
      group: apache
      mode:  "u+rw,g+rw,o-rwx"

  # install dependencies with pip in virtualenv
  - pip:
      requirements: "{{ install_root }}/{{ project_name }}/requirements/requirements.txt"
      virtualenv: "{{ venv }}"

  # Change ownership for libraries
  - file:
      path: "{{ venv }}"
      recurse: yes
      owner: pyapps
      group: apache
      mode:  "u+rw,g+rw,o-rwx"

  # make manage.py executable
  - file:
      path: "{{ install_root }}/{{ project_name }}/manage.py"
      state: touch
      mode: "u+rwx,g+rwx,o-rwx"

  - name: Django migrate
    django_manage:
      command: migrate
      app_path: "{{ install_root }}/{{ project_name }}/"
      virtualenv: "{{ venv }}"
    when: "inventory_hostname in groups['appprimeserver']"

  - name: Django collectstatic
    django_manage:
      command: collectstatic
      app_path: "{{ install_root }}/{{ project_name }}/"
      virtualenv: "{{ venv }}"
    when: "inventory_hostname in groups['appprimeserver']"

  - name: make sure apache server is running
    service: name=httpd state=started enabled=yes
 
  - name: Restart Apache
    action: shell /bin/echo $HOSTNAME
    notify:
      - restart apache
 
  handlers:
    - name: restart apache
      service: name=httpd state=restarted


# vim:ff=unix ts=2 sw=2 ai expandtab ft=ansible
