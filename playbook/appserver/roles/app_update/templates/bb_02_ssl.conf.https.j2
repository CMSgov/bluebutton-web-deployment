#######################################################################
# bb_02_ssl.conf
# copied from hhs_ansible
# playbook/appserver/roles/app_update/templates/bb_02_ssl.conf.https.j2
# SSL is ON. ie. https protocol used.
# v.1.0.2 add ssl prefix to WSGIDaemonProcess to sslapache
#######################################################################
#
# When we also provide SSL we have to listen to the
# the HTTPS port in addition.
#
Listen 443 https
##
##  SSL Global Context
##
##  All SSL configuration in this context applies both to
##  the main server and all SSL-enabled virtual hosts.
##

#   Pass Phrase Dialog:
#   Configure the pass phrase gathering process.
#   The filtering dialog program (`builtin' is a internal
#   terminal dialog) has to provide the pass phrase on stdout.
SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog

#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism
#   to use and second the expiring timeout (in seconds).
SSLSessionCache         shmcb:/run/httpd/sslcache(512000)
SSLSessionCacheTimeout  300

#   Pseudo Random Number Generator (PRNG):
#   Configure one or more sources to seed the PRNG of the
#   SSL library. The seed data should be of good random quality.
#   WARNING! On some platforms /dev/random blocks if not enough entropy
#   is available. This means you then cannot use the /dev/random device
#   because it would lead to very long connection times (as long as
#   it requires to make more entropy available). But usually those
#   platforms additionally provide a /dev/urandom device which doesn't
#   block. So, if available, use this one instead. Read the mod_ssl User
#   Manual for more details.
SSLRandomSeed startup file:/dev/urandom  256
SSLRandomSeed connect builtin

#SSLRandomSeed startup file:/dev/random  512
#SSLRandomSeed connect file:/dev/random  512
#SSLRandomSeed connect file:/dev/urandom 512

#
# Use "SSLCryptoDevice" to enable any supported hardware
# accelerators. Use "openssl engine -v" to list supported
# engine names.  NOTE: If you enable an accelerator and the
# server does not start, consult the error logs and ensure
# your accelerator is functioning properly.
#
SSLCryptoDevice builtin
#SSLCryptoDevice ubsec

##
## SSL Virtual Host Context
##

<VirtualHost _default_:443>
    RewriteEngine On
    RewriteCond %{HTTP:X-Forwarded-Proto} =http
	RewriteRule . https://%{HTTP:Host}%{REQUEST_URI} [L,R=permanent]

	RewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)
	RewriteRule .* - [F]


    # General setup for the virtual host, inherited from global configuration
    #   SSL Engine Switch:
    #   Enable/Disable SSL for this virtual host.
    SSLEngine on

    #   SSL Protocol support:
    # List the enable protocol levels with which clients will be able to
    # connect.  Disable SSLv2 access by default:
    # SSLProtocol all -SSLv2 -SSLv3
    # Red Hat Enterprise Linux 7 or Red Hat Enterprise Linux 6.6+
    SSLProtocol -All +TLSv1 +TLSv1.1 +TLSv1.2

    #   SSL Cipher Suite:
    #   List the ciphers that the client is permitted to negotiate.
    #   See the mod_ssl documentation for a complete list.
    # SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5:!SEED:!IDEA
    # Only HIGH Ciphers
    SSLCipherSuite ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH:!EXP:!SSLV2:!eNULL


    ServerAdmin webmaster@{{ cf_app_pyserver_name }}

    DocumentRoot /var/www/doc/{{ cf_app_pyserver_name|lower }}

    # Use separate log files for the SSL virtual host; note that LogLevel
    # is not inherited from httpd.conf.
    LogLevel warn

    ErrorLog logs/{{ cf_app_pyserver_name|lower }}-ssl_error_log
    CustomLog logs/{{ cf_app_pyserver_name|lower }}-access_log common
    TransferLog logs/{{ cf_app_pyserver_name|lower }}-ssl_transfer_log
    #   Per-Server Logging:
    #   The home of a custom SSL log file. Use this when you want a
    #   compact non-error SSL logfile on a virtual host basis.
    CustomLog logs/ssl_request_log \
              "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

    # Lets Encrypt copies certs into place:
    # see: playbook/appserver/roles/letsencrypt_cert_copy/tasks/main.yml
    #    --cert-file      {{ apache_cert_store }}/cert.pem  \
    #    --key-file       {{ apache_cert_store }}/key.pem  \
    #    --fullchain-file {{ apache_cert_store }}/fullchain.pem \

    #   Server Certificate:
    # Point SSLCertificateFile at a PEM encoded certificate.  If
    # the certificate is encrypted, then you will be prompted for a
    # pass phrase.  Note that a kill -HUP will prompt again.  A new
    # certificate can be generated using the genkey(1) command.
    SSLCertificateFile {{ apache_cert_store }}/cert.pem

    #   Server Private Key:
    #   If the key is not combined with the certificate, use this
    #   directive to point at the key file.  Keep in mind that if
    #   you've both a RSA and a DSA private key you can configure
    #   both in parallel (to also allow the use of DSA ciphers, etc.)
    SSLCertificateKeyFile {{ apache_cert_store }}/key.pem

    #   Server Certificate Chain:
    #   Point SSLCertificateChainFile at a file containing the
    #   concatenation of PEM encoded CA certificates which form the
    #   certificate chain for the server certificate. Alternatively
    #   the referenced file can be the same as SSLCertificateFile
    #   when the CA certificates are directly appended to the server
    #   certificate for convinience.
    SSLCertificateChainFile {{ apache_cert_store }}/fullchain.pem

    # Set ServerName to match letsencrypt certificate
    ServerName {{ cf_app_tag_key_layer|lower }}{{ app_ip_last_octet.stdout }}.{{ external_dns_name }}

    WSGIDaemonProcess sslapache user={{ env_cf_app_pyapps_user }} group=apache python-home={{ cf_app_py_virtual_env }} python-path={{ cf_app_py_virtual_env }}/bin:/usr/local/bin:{{ cf_app_py_virtual_env }}/lib/python{{ python_ver }}/site-packages

    WSGIProcessGroup sslapache
    WSGIScriptAlias / {{ cf_app_pyapp_home }}/hhs_oauth_server/hhs_oauth_server/wsgi.py
    WSGIPassAuthorization on

    # Directory specification needed to allow apache to load wsgi.py
    # Directory  to point to folder where wsgi.py stored
    <Directory {{ cf_app_pyapp_home }}/hhs_oauth_server/hhs_oauth_server>
        Order deny,allow
        Allow from all

    </Directory>

    <Directory {{ cf_app_pyapp_home }}/hhs_oauth_server/hhs_oauth_server/settings>
        # Apache 2.4 command:
        Require all granted
        # Apache 2.2 commands:
        # Allow from all
        # Order deny,allow

        <Files base.py >
            Allow from all

        </Files>

        <Files production.py>
            Allow from all

        </Files>

        <Files aws*.py>
            Allow from all

        </Files>

    </Directory>

    # Alias /static/ {{ cf_app_pyapp_home }}/hhs_oauth_server/collectedstatic/
    # Alias /media/  {{ cf_app_pyapp_home }}/hhs_oauth_server/media/

    <Directory {{ cf_app_pyapp_home }}/hhs_oauth_server/collectedstatic>
        # Apache 2.4 command:
        Require all granted
        # Apache 2.2 commands:
        # Allow from all
        # Order deny,allow

    </Directory>

    <Directory {{ cf_app_pyapp_home }}/hhs_oauth_server/media>
        # Apache 2.4 command:
        Require all granted
        # Apache 2.2 commands:
        # Allow from all
        # Order deny,allow

    </Directory>

    <Directory {{ cf_app_pyapp_home }}/hhs_oauth_server>
        # Apache 2.4 command:
        Require all granted
        # Apache 2.2 commands:
        # Order allow,deny
        # Allow from all

    </Directory>

    ##########################################################################
    # Adding Swagger-ui files

    Alias /devdocs/ {{ swagger_ui_parent_dir }}/swagger-ui/dist/

    <Directory "{{ swagger_ui_parent_dir }}/swagger-ui/dist">
	# Apache 2.4 command:
	Require all granted

    </Directory>
    ##########################################################################
    # Adding swagger data for hhs_oauth_server api

    # Alias {{ swagger_external_path }} /var/www/doc/swagger_docs/
    Alias {{ swagger_external_path }} {{ cf_app_pyapp_home }}/hhs_oauth_server/apidocs/

    <Directory "{{ cf_app_pyapp_home }}/hhs_oauth_server/apidocs/">
	# Apache 2.4 command:
	Require all granted
	<Files bbonfhir*.json>
            Allow from all

        </Files>

        <Files bbonfhir*.yaml>
            Allow from all

	</Files>
    </Directory>
    ##########################################################################

    <Files ~ "\.(cgi|shtml|phtml|php3?)$">
        SSLOptions +StdEnvVars

    </Files>

    <Directory "/var/www/cgi-bin">
        SSLOptions +StdEnvVars

    </Directory>

    #   SSL Protocol Adjustments:
    #   The safe and default but still SSL/TLS standard compliant shutdown
    #   approach is that mod_ssl sends the close notify alert but doesn't wait for
    #   the close notify alert from client. When you need a different shutdown
    #   approach you can use one of the following variables:
    #   o ssl-unclean-shutdown:
    #     This forces an unclean shutdown when the connection is closed, i.e. no
    #     SSL close notify alert is send or allowed to received.  This violates
    #     the SSL/TLS standard but is needed for some brain-dead browsers. Use
    #     this when you receive I/O errors because of the standard approach where
    #     mod_ssl sends the close notify alert.
    #   o ssl-accurate-shutdown:
    #     This forces an accurate shutdown when the connection is closed, i.e. a
    #     SSL close notify alert is send and mod_ssl waits for the close notify
    #     alert of the client. This is 100% SSL/TLS standard compliant, but in
    #     practice often causes hanging connections with brain-dead browsers. Use
    #     this only for browsers where you know that their SSL implementation
    #     works correctly.
    #   Notice: Most problems of broken clients are also related to the HTTP
    #   keep-alive facility, so you usually additionally want to disable
    #   keep-alive for those clients, too. Use variable "nokeepalive" for this.
    #   Similarly, one has to force some clients to use HTTP/1.0 to workaround
    #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
    #   "force-response-1.0" for this.
    BrowserMatch "MSIE [2-5]" \
        nokeepalive ssl-unclean-shutdown \
        downgrade-1.0 force-response-1.0

</VirtualHost>
