pipeline {
  agent {
    kubernetes {
      defaultContainer "bb2-cbc-build"
      yamlFile "Jenkinsfiles/cbc-build.yaml"
    }
  }

  environment {
    AWS_ACCESS_KEY_ID = credentials("bb2-aws-key-id")
    AWS_SECRET_ACCESS_KEY = credentials("bb2-aws-key-secret")
    AWS_DEFAULT_REGION = "us-east-1"
    VAULT_PASSWORD = credentials("bb2-vault-password")
    SSH_KEY = credentials("bb2-ssh-key-${params.APP_ENV}")
  }

  parameters {
    choice(
      name: "APP_ENV",
      choices: ["dev", "test", "impl", "prod"],
      description: "The environment to run in."
    )

    choice(
      name: "RUN_MIGRATE",
      choices: ["no", "yes"],
      description: "Run database migrations."
    )

    choice(
      name: "RUN_COLLECTSTATIC",
      choices: ["no", "yes"],
      description: "Run collectstatic (uploads static resources to S3)."
    )
  }

  stages {
    stage("Notify Slack") {
      steps {
        script {
          //helpers = load "Jenkinsfiles/helpers.groovy"
          //helpers.slackNotify "STARTING"
          echo "DEBUG: slackNotify STARTING"
        }
      }
    }

    stage("Run Post Deploy Playbook") {
      steps {
        sh """
        EC2_INI_PATH=inventory/config/${APP_ENV}.ini \
        ansible-playbook playbook/django/main.yml \
          --vault-password-file '${VAULT_PASSWORD}' \
          --private-key '${SSH_KEY}' \
          -i '10.224.90.57,' \
          -l 'tag_Function_app_AppServer' \
          -e 'env=${APP_ENV}' \
          -e 'collectstatic=${RUN_COLLECTSTATIC}' \
          -e 'migrate=${RUN_MIGRATE}'
        """
      }
    }
  }

  post {
    success {
      script {
        //helpers.slackNotify("SUCCESS", "good")
        echo "DEBUG: slackNotify SUCCESS"
      }
    }

    failure {
      script {
        //helpers.slackNotify("FAILURE", "bad")
        echo "DEBUG: slackNotify FAILURE"
      }
    }
  }
}