def private_key = ''
def vault_pass = 'vault-pass'
def aws_creds = 'cbj-deploy'
def release_version = ''

pipeline {
  agent {
    node {
      label ''
      customWorkspace 'blue-button-run-playbook'
    }
  }

  parameters {
    string(
      defaultValue: "",
      description: 'The playbook to run in instance. Required.',
      name: 'PLAYBOOK'
    )
    string(
      defaultValue: "*/master",
      description: 'The branch of the deployment repo to use for the playbook run.',
      name: 'RUN_BRANCH'
    )
    string(
      defaultValue: "",
      description: 'The Gold Image AMI id that will be used as the base for app servers.',
      name: 'AMI_ID'
    )
    string(
      defaultValue: "",
      description: 'The subnet ID where the build server will be launched.',
      name: 'SUBNET_ID'
    )
    string(
      defaultValue: "m3.medium",
      description: 'The class/size of the ec2 instance to launch.',
      name: 'INSTANCE_CLASS'
    )
    choice(
      choices: 'dev\ntest',
      description: 'The environment to deploy to. Required.',
      name: 'ENV'
    )
  }

  stages {
    stage('Ensure PLAYBOOK, ENV, AMI_ID and SUBNET_ID') {
      steps {
        sh """
        if [ -z "${params.PLAYBOOK}" ] || [ -z "${params.ENV}" ] || [ -z "${params.AMI_ID}" ] || [ -z "${params.SUBNET_ID}" ]
        then
          exit 1
        fi
        """
      }
    }

    stage('Stop run on IMPL and PROD') {
      steps {
        sh """
        if [ "${params.ENV}" == "impl" ] || [ "${params.ENV}" == "prod" ]
        then
          exit 1
        fi
        """
      }
    }

    stage('Set private key file') {
      steps {
        script {
          private_key = "${params.ENV}-key"
        }
      }
    }

    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[
            name: "${params.RUN_BRANCH}"
          ]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[
            $class: 'RelativeTargetDirectory',
            relativeTargetDir: 'code'
          ]],
          userRemoteConfigs: [[
            url: "${env.GIT_URL}"
          ]]
        ])
      }
    }

    stage('Run PLAYBOOK') {
      steps {
        script {
          dir('code') {
            withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
              withCredentials([
                file(credentialsId: private_key, variable: 'pk'),
                file(credentialsId: vault_pass, variable: 'vp')
              ]) {
                sh """
                  virtualenv -ppython3 venv
                  . venv/bin/activate

                  pip install --upgrade pip
                  pip install --upgrade cffi

                  pip install ansible==2.4.2.0
                  pip install boto

                  ansible-playbook playbook/run_playbook/main.yml  \
                    --vault-password-file ${vp} \
                    --private-key ${pk} \
                    -e 'git_branch=${params.BRANCH}' \
                    -e 'env=${params.ENV}' \
                    -e 'cf_app_instance_type=${params.INSTANCE_CLASS}' \
                    -e 'build_subnet_id=${params.SUBNET_ID}' \
                    -e 'ami_app_gold_image=${params.AMI_ID}'
                """
              }
            }
          }
        }
      }
    }
  }
}
