pipeline {
  agent {
    kubernetes {
      defaultContainer "bb2-cbc-build"
      yamlFile "Jenkinsfiles/cbc-build.yaml"
    }
  }

  environment {
    AWS_ACCESS_KEY_ID = credentials("bb2-aws-key-id")
    AWS_SECRET_ACCESS_KEY = credentials("bb2-aws-key-secret")
    AWS_DEFAULT_REGION = "us-east-1"
    SSH_KEY = credentials("bb2-ssh-key-${params.APP_ENV}")
  }

  parameters {
    choice(
      name: "APP_ENV",
      choices: ["test", "impl", "prod"],
      description: "The environment to run in."
    )

    string(
      name: "DJANGO_COMMAND",
      defaultValue: "",
      description: "The django management command to run."
    )

    string(
      name: "CANARY_IP",
      defaultValue: "",
      description: "When this is set, run against a canary IP rather than a tagged deployment instance"
    )
  }

  stages {
    stage("Notify Slack") {
      steps {
        script {
          helpers = load "Jenkinsfiles/helpers.groovy"
          helpers.slackNotify "STARTING - ENV:${params.APP_ENV}"
        }
      }
    }

    stage("Determine Ansible Config") {
      steps {
        script {
          if (params.CANARY_IP != "") {
            echo("Setting ansible config for canary IP")
            ANSIBLE_INVENTORY = "${params.CANARY_IP},"
            ANSIBLE_SUBSET = ""
          } else {
            echo("Setting ansible config for tagged deployment instance")
            ANSIBLE_INVENTORY = "inventory/ec2.py"
            ANSIBLE_SUBSET = "tag_Function_app_AppServer"
          }
        }
      }
    }

    stage("Run Django Command") {
      steps {
        sh """
        export AWS_DEFAULT_REGION=us-east-1
        echo "Running as user: \$(whoami)"
        echo "User ID: \$(id -u)"
        EC2_INI_PATH=inventory/config/${APP_ENV}.ini \
        ansible-playbook playbook/run_django_command/main.yml \
          --private-key '${SSH_KEY}' \
          -i '${ANSIBLE_INVENTORY}' \
          -l "'${ANSIBLE_SUBSET}'" \
          -e 'env=${APP_ENV}' \
          -e 'django_command="${DJANGO_COMMAND}"'
        """
      }
    }
  }

  post {
    success {
      script {
        helpers.slackNotify("SUCCESS - ENV:${params.APP_ENV}", "good")
      }
    }

    failure {
      script {
        helpers.slackNotify("FAILURE - ENV:${params.APP_ENV}", "bad")
      }
    }
  }
}