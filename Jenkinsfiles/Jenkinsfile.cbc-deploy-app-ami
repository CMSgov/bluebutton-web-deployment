pipeline {
  agent {
    kubernetes {
      defaultContainer "bb2-cbc-build"
      yamlFile "Jenkinsfiles/cbc-build.yaml"
    }
  }

  environment {
    AWS_ACCESS_KEY_ID = credentials("bb2-aws-key-id")
    AWS_SECRET_ACCESS_KEY = credentials("bb2-aws-key-secret")
    AWS_DEFAULT_REGION = "us-east-1"
    TF_BACKEND = credentials("bb2-terraform-backend-${params.APP_ENV}")
    TF_VARS = credentials("bb2-terraform-vars-${params.APP_ENV}")
    TF_IN_AUTOMATION = true
  }

  parameters {
    choice(
      name: "APP_MIGRATIONS",
      choices: ["", "Pre-deploy", "Post-deploy", "No Migrations"],
      description: "Are there any migrations required for this deploy?"
    )

    choice(
      name: "APP_ENV",
      choices: ["test", "impl", "prod"],
      description: "The environment to deploy to."
    )

    string(
      name: "APP_AMI_ID",
      defaultValue: "",
      description: "The AMI ID for the app image."
    )
  }

  stages {
    stage("Check migration status") {
      steps {
        script {
          if (params.APP_MIGRATIONS == '') {
              currentBuild.result = 'ABORTED'
              error('No app migration selection was made.')
          }
        }
      }
    }

    stage("Notify Slack") {
      steps {
        script {
          helpers = load "Jenkinsfiles/helpers.groovy"
          helpers.slackNotify "STARTING - ENV:${params.APP_ENV}"
        }
      }
    }

    stage("Run Terraform Plan") {
      steps {
        sh """
        cd terraform/${APP_ENV}
        terraform init -no-color -input=false -backend-config='${TF_BACKEND}'
        terraform plan -no-color -input=false -out=tfplan -var-file='${TF_VARS}' -var='ami_id=${APP_AMI_ID}'
        """
      }
    }

    stage("Confirm Deployment") {
      input {
        message "Deploy this terraform plan to ${params.APP_ENV}?"
        ok "Deploy"
      }
      steps {
        echo "Deploy confirmation recieved, proceeding."
      }
    }

    stage("Run Terraform Apply") {
      steps {
        sh """
        cd terraform/${APP_ENV}
        terraform apply -no-color -input=false -auto-approve tfplan
        """
      }
    }

    stage("Get ASG name for this deploy Environment") {
      steps {
        script {
          def autoScalingGroupName = sh(
            returnStdout: true,
            script: "aws autoscaling describe-auto-scaling-groups --query  'AutoScalingGroups[?contains(AutoScalingGroupName,\'${params.APP_ENV}\')].AutoScalingGroupName' --output text)"
          ).trim()

          env.AUTO_SCALING_GROUP_NAME = autoScalingGroupName
        }
      }
    }

    stage("Run the instance refresh for the ASG") {
      steps {
        script {
          def instanceRefreshResult = sh(
            returnStatus: true,
            script: "aws autoscaling start-instance-refresh --auto-scaling-group-name $AUTO_SCALING_GROUP_NAME"
          )

          if(instanceRefreshResult == 0) {
            echo "Instance Refresh started successfully"
          } else {
            error "Failed to start instance refresh"
          }
        }
      }
    }
  }

  post {
    success {
      script {
        helpers.slackNotify("SUCCESS - ENV:${params.APP_ENV}", "good")
      }
    }

    failure {
      script {
        helpers.slackNotify("FAILURE - ENV:${params.APP_ENV}", "bad")
      }
    }
  }
}