pipeline {
  agent {
    kubernetes {
      defaultContainer "bb2-cbc-build"
      yamlFile "Jenkinsfiles/cbc-build.yaml"
    }
  }

  environment {
    AWS_ACCESS_KEY_ID = credentials("bb2-aws-key-id")
    AWS_SECRET_ACCESS_KEY = credentials("bb2-aws-key-secret")
    AWS_DEFAULT_REGION = "us-east-1"
    TF_VARS = credentials("bb2-terraform-vars-${params.APP_ENV}")
    TF_IN_AUTOMATION = true
  }

  parameters {
    choice(
      name: "APP_MIGRATIONS",
      choices: ["", "Pre-deploy", "Post-deploy", "No Migrations"],
      description: "Are there any migrations required for this deploy?"
    )

    choice(
      name: "APP_ENV",
      choices: ["test", "impl", "prod"],
      description: "The environment to deploy to."
    )

    string(
      name: "APP_AMI_ID",
      defaultValue: "",
      description: "The AMI ID for the app image."
    )
  }

  stages {
    stage("Check migration status") {
      steps {
        script {
          if (params.APP_MIGRATIONS == '') {
              currentBuild.result = 'ABORTED'
              error('No app migration selection was made.')
          }
        }
      }
    }

    stage("Notify Slack") {
      steps {
        script {
          helpers = load "Jenkinsfiles/helpers.groovy"
          helpers.slackNotify "STARTING - ENV:${params.APP_ENV}"
        }
      }
    }

    stage("Terragrunt version") {
      steps {
        sh """
        terragrunt -v
        """
      }
    }

    stage("Run Terragrunt Plan") {
      steps {
        sh """
        cd terraform/${APP_ENV}
        terragrunt init --terragrunt-log-level error --terragrunt-disable-bucket-update -no-color -input=false
        terraform plan -no-color -input=false -out=tfplan -var-file='${TF_VARS}' -var='ami_id=${APP_AMI_ID}'
        """
      }
    }

    stage("Confirm Deployment") {
      input {
        message "Deploy this terraform plan to ${params.APP_ENV}?"
        ok "Deploy"
      }
      steps {
        echo "Deploy confirmation recieved, proceeding."
      }
    }

    stage("Run Terragrunt Apply") {
      steps {
        sh """
        cd terraform/${APP_ENV}
        terragrut apply -no-color -input=false -auto-approve tfplan
        """
      }
    }

    stage("Get ASG name for this deploy Environment") {
      steps {
        script {
          def autoScalingGroupName = sh(
            returnStdout: true,
            script: "aws autoscaling describe-auto-scaling-groups --query \"AutoScalingGroups[?contains(AutoScalingGroupName,\'${params.APP_ENV}\')].AutoScalingGroupName\" --output text"
          ).trim()

          env.AUTO_SCALING_GROUP_NAME = autoScalingGroupName
        }
      }
    }

    stage("Get Launch Template name for this deploy Environment") {
      steps {
        script {
          // groovy scripts can be broken out if determined that we need access to these functions elsewhere
          def launchTemplateName = sh(
            returnStdout: true,
            script: "aws ec2 describe-launch-templates --query \"LaunchTemplates[?contains(LaunchTemplateName,\'${params.APP_ENV}\')].LaunchTemplateName\" --output text"
          ).trim()

          env.LAUNCH_TEMPLATE_NAME = launchTemplateName
        }
      }
    }

    stage("Get Launch Template latest version number") {
      steps {
        script {
          // groovy scripts can be broken out if determined that we need access to these functions elsewhere
          def launchTemplateVersion = sh(
            returnStdout: true,
            script: "aws ec2 describe-launch-templates --launch-template-name $LAUNCH_TEMPLATE_NAME --query \"LaunchTemplates[].LatestVersionNumber\" --output text"
          ).trim()

          env.LAUNCH_TEMPLATE_VERSION = launchTemplateVersion
        }
      }
    }

    stage("Set default version for launch template") {
      steps {
        sh """
          aws ec2 modify-launch-template --launch-template-name $LAUNCH_TEMPLATE_NAME --default-version \"$LAUNCH_TEMPLATE_VERSION\"
        """
      }
    }

    stage("Run the instance refresh for the ASG") {
      steps {
        script {
          def instanceRefreshResult = sh(
            returnStatus: true,
            script: "aws autoscaling start-instance-refresh --auto-scaling-group-name $AUTO_SCALING_GROUP_NAME \
              --preferences '{\"InstanceWarmup\": 300, \"MinHealthyPercentage\": 67, \"SkipMatching\": true, \"AutoRollback\": true}' \
              --desired-configuration '{\"LaunchTemplate\": {\"LaunchTemplateName\": \"$LAUNCH_TEMPLATE_NAME\"}}'"
          )

          if(instanceRefreshResult == 0) {
            echo "Instance Refresh started successfully"
          } else {
            error "Failed to start instance refresh"
          }
        }
      }
    }
  }

  post {
    success {
      script {
        helpers.slackNotify("SUCCESS - ENV:${params.APP_ENV}", "good")
      }
    }

    failure {
      script {
        helpers.slackNotify("FAILURE - ENV:${params.APP_ENV}", "bad")
      }
    }
  }
}