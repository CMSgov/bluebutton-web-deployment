pipeline {
  agent {
    kubernetes {
      defaultContainer "bb2-cbc-build"
      yamlFile "Jenkinsfiles/cbc-build.yaml"
    }
  }

  environment {
    //AWS_ACCESS_KEY_ID = credentials("bb2-aws-key-id")
    //AWS_SECRET_ACCESS_KEY = credentials("bb2-aws-key-secret")
    AWS_DEFAULT_REGION = "us-east-1"
    TF_VARS = credentials("bb2-terraform-vars-${params.APP_ENV}-canary-2023")
    TF_IN_AUTOMATION = true
  }

  parameters {
    choice(
      name: "APP_ENV",
      choices: ["test", "impl", "prod"],
      description: "The environment to deploy to."
    )

    string(
      name: "APP_AMI_ID",
      defaultValue: "",
      description: "The AMI ID for the app image."
    )
  }

  stages {
    stage("Notify Slack") {
      steps {
        script {
          helpers = load "Jenkinsfiles/helpers.groovy"
          helpers.slackNotify "STARTING - ENV:${params.APP_ENV}"
        }
      }
    }
    stage("Assume AWS Role") {
      steps {
        withCredentials([string(credentialsId: params.APP_ENV == 'test' ? 'aws-assume-role-arn' : 'aws-assume-role-arn-prod', variable: 'ROLE_ARN')]) {
          script {
            def sessionName = "jenkins-${env.BUILD_ID}"
            def credsJson = sh(
              script: """#!/bin/bash
              aws sts assume-role \
                --role-arn "$ROLE_ARN" \
                --role-session-name "$sessionName" \
                --output json
              """,
              returnStdout: true
            ).trim()

            def creds = readJSON text: credsJson

            env.AWS_ACCESS_KEY_ID     = creds.Credentials.AccessKeyId
            env.AWS_SECRET_ACCESS_KEY = creds.Credentials.SecretAccessKey
            env.AWS_SESSION_TOKEN     = creds.Credentials.SessionToken
            // ✅ Validate assumed role

              // ✅ Validate assumed role
              def callerIdentity = sh(
                script: """#!/bin/bash
                aws sts get-caller-identity --output text
                """,
                returnStatus: true
              )

              if (callerIdentity != 0) {
                error("Failed to verify assumed AWS role. Check credentials or permissions.")
              }
          }
        }
      }
    }


    stage("Terragrunt version") {
      steps {
        sh """
        terragrunt -v
        """
      }
    }

    stage("Run terragrunt Plan") {
      steps {
        sh """
        cd terraform/${APP_ENV}_canary
        [ -f .terraform.lock.hcl ] && rm .terraform.lock.hcl
        terragrunt init --terragrunt-log-level error --terragrunt-disable-bucket-update -no-color -input=false
        terragrunt plan -no-color -input=false -out=tfplan -var-file='${TF_VARS}' -var='ami_id=${APP_AMI_ID}'
        """
      }
    }

    stage("Confirm Deployment") {
      input {
        message "Deploy this terraform plan to ${params.APP_ENV}?"
        ok "Deploy"
      }
      steps {
        echo "Deploy confirmation recieved, proceeding."
      }
    }

    // Terragrunt apply
    stage("Run Terraform Apply") {
      steps {
        sh """
        cd terraform/${APP_ENV}_canary
        terragrunt apply -no-color -input=false -auto-approve tfplan
        """
      }
    }

    stage("Wait For Canary") {
      steps {
        script {
          CANARY_IP = sh(returnStdout: true, script: "cd terraform/${APP_ENV}_canary; terraform output private_ip").trim()
        }

        sh """
        sleep 180
        curl -v --silent --insecure --retry 120 --retry-delay 15 --retry-connrefused --max-time 600 --connect-timeout 120 https://${CANARY_IP}/.well-known/openid-configuration
        """
      }
    }
  }

  post {
    success {
      script {
        helpers.slackNotify("SUCCESS - ENV:${params.APP_ENV}", "good")
      }
    }

    failure {
      script {
        helpers.slackNotify("FAILURE - ENV:${params.APP_ENV}", "bad")
      }
    }
  }
}