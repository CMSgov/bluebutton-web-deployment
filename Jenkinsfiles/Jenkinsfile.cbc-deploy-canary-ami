pipeline {
  agent {
    kubernetes {
      defaultContainer "bb2-cbc-build"
      yamlFile "Jenkinsfiles/cbc-build.yaml"
    }
  }

  environment {
    AWS_ACCESS_KEY_ID = credentials("bb2-aws-key-id")
    AWS_SECRET_ACCESS_KEY = credentials("bb2-aws-key-secret")
    AWS_DEFAULT_REGION = "us-east-1"
    TF_BACKEND = credentials("bb2-terraform-backend-${params.APP_ENV}-canary")
    TF_VARS = credentials("bb2-terraform-vars-${params.APP_ENV}-canary")
    TF_IN_AUTOMATION = true
  }

  parameters {
    choice(
      name: "APP_ENV",
      choices: ["test", "impl", "prod"],
      description: "The environment to deploy to."
    )

    string(
      name: "APP_AMI_ID",
      defaultValue: "",
      description: "The AMI ID for the app image."
    )
  }

  stages {
    // stage("Notify Slack") {
    //   steps {
    //     script {
    //       helpers = load "Jenkinsfiles/helpers.groovy"
    //       helpers.slackNotify "STARTING - ENV:${params.APP_ENV}"
    //     }
    //   }
    // }

    // Testing terragrunt in the deploy pipeline
    // stage("Run TERRAGRUNT Plan") {
    //   steps {
    //     sh """
    //     cd terraform/${APP_ENV}_canary
    //     terragrunt init -no-color -input=false -backend-config='${TF_BACKEND}'
    //     terragrunt plan -no-color -input=false -out=tfplan -var-file='${TF_VARS}' -var='ami_id=${APP_AMI_ID}'
    //     """
    //   }
    // }

    stage("Run Terraform Plan") {
      steps {
        sh """
        cd terraform/${APP_ENV}_canary
        terraform init -no-color -input=false -backend-config='${TF_BACKEND}'
        terraform plan -no-color -input=false -out=tfplan -var-file='${TF_VARS}' -var='ami_id=${APP_AMI_ID}'
        """
      }
    }

    stage("Confirm Deployment") {
      input {
        message "Deploy this terraform plan to ${params.APP_ENV}?"
        ok "Deploy"
      }
      steps {
        echo "Deploy confirmation recieved, proceeding."
      }
    }

    // Terragrunt apply
    stage("Run Terraform Apply") {
      steps {
        sh """
        cd terraform/${APP_ENV}_canary
        terragrunt apply -no-color -input=false -auto-approve tfplan
        """
      }
    }

    // stage("Run Terraform Apply") {
    //   steps {
    //     sh """
    //     cd terraform/${APP_ENV}_canary
    //     terraform apply -no-color -input=false -auto-approve tfplan
    //     """
    //   }
    // }

    stage("Wait For Canary") {
      steps {
        script {
          CANARY_IP = sh(returnStdout: true, script: "cd terraform/${APP_ENV}_canary; terraform output private_ip").trim()
        }

        sh """
        curl --silent --insecure --retry 120 --retry-delay 15 --retry-connrefused https://${CANARY_IP}/.well-known/openid-configuration
        """
      }
    }
  }

  // post {
  //   success {
  //     script {
  //       helpers.slackNotify("SUCCESS - ENV:${params.APP_ENV}", "good")
  //     }
  //   }

  //   failure {
  //     script {
  //       helpers.slackNotify("FAILURE - ENV:${params.APP_ENV}", "bad")
  //     }
  //   }
  // }
}