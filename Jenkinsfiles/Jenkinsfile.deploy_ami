def aws_creds = 'cbj-deploy'
def private_key = 'dev-key'
def vault_pass = 'vault-pass'
def backend_config = ''
def terraform_vars = ''

pipeline {
  agent {
    node {
      label ''
      customWorkspace 'blue-button-deploy-ami'
    }
  }

  parameters {
    string(
      defaultValue: "*/master",
      description: 'The branch of the deployment repo to use for the build.',
      name: 'DEPLOY_BRANCH'
    )
    string(
      defaultValue: "",
      description: 'The Blue Button AMI id that will be used for the deployment.',
      name: 'AMI_ID'
    )
    string(
      defaultValue: "m3.medium",
      description: 'The class/size of the ec2 instance to launch.',
      name: 'INSTANCE_CLASS'
    )
    choice(
      choices: 'dev\ntest\nimpl\nprod',
      description: 'The environment to deploy to. Required.',
      name: 'ENV'
    )
    choice(
      choices: 'no\nyes',
      description: 'Should we run database migrations on deploy?',
      name: 'MIGRATE'
    )
    choice(
      choices: 'yes\nno',
      description: 'Should we run collectstatic on deploy?',
      name: 'COLLECT_STATIC'
    )
  }

  stages {
    stage('Ensure ENV and AMI_ID') {
      steps {
        sh """
        if [ -z "${params.ENV}" ] || [ -z "${params.AMI_ID}" ]
        then
          exit 1
        fi
        """
      }
    }

    stage('Clear the working dir') {
      steps {
        dir('code') {
          deleteDir()
        }
      }
    }

    stage('Notify HipChat') {
      steps {
        withCredentials([
          string(credentialsId: 'hipchat-room', variable: 'room'),
          string(credentialsId: 'hipchat-server', variable: 'server'),
          string(credentialsId: 'hipchat-token', variable: 'token')
        ]) {
          hipchatSend(
            color: 'GRAY',
            notify: true,
            message: "STARTED: ${env.JOB_NAME} [${params.ENV}]",
            room: room,
            sendAs: '',
            server: server,
            token: token,
            v2enabled: true
          )
        }
      }
    }

    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[
            name: "${params.DEPLOY_BRANCH}"
          ]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[
            $class: 'RelativeTargetDirectory',
            relativeTargetDir: 'code'
          ]],
          userRemoteConfigs: [[
            url: 'https://github.com/CMSgov/bluebutton-web-deployment.git'
          ]]
        ])
      }
    }

    stage('Install requirements') {
      steps {
        dir('code') {
          script {
            sh """
              virtualenv -ppython2.7 venv
              . venv/bin/activate

              pip install --upgrade pip
              pip install --upgrade cffi

              pip install ansible==2.4.2.0
              pip install boto
            """
          }
        }
      }
    }

    stage('Set private key file') {
      steps {
        script {
            private_key = 'prod-key'
        }
      }
      when {
        expression {
          params.ENV == "prod"
        }
      }
    }

    stage('Determine terraform config files') {
      steps {
        script {
          if (params.ENV == 'dev') {
            backend_config = 'bb-backend-dev'
            terraform_vars = 'bb-tf-dev'
          }
          if (params.ENV == 'test') {
            backend_config = 'bb-backend-test'
            terraform_vars = 'bb-tf-test'
          }
          if (params.ENV == 'impl') {
            backend_config = 'bb-backend-impl'
            terraform_vars = 'bb-tf-impl'
          }
          if (params.ENV == 'prod') {
            backend_config = 'bb-backend-prod'
            terraform_vars = 'bb-tf-prod'
          }
        }
      }
    }

    stage('Sanity check terraform plan') {
      steps {
        script {
          dir('code') {
            withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
              withCredentials([
                file(credentialsId: backend_config, variable: 'bc'),
                file(credentialsId: terraform_vars, variable: 'tv')
              ]) {
                sh """
                  cd terraform/${params.ENV}

                  export TF_CLI_ARGS="-no-color"

                  terraform init -backend-config=$bc

                  TF_OUT=\$(terraform plan \
                    -var-file=$tv \
                    -var 'ami_id=${params.AMI_ID}' \
                    -var 'instance_type=${params.INSTANCE_CLASS}')

                  TF_ASG_CHECK=\$(echo "\$TF_OUT" | grep "aws_autoscaling_group.main")
                  TF_LC_CHECK=\$(echo "\$TF_OUT" | grep "aws_launch_configuration.app")
                  TF_AMI_CHECK=\$(echo "\$TF_OUT" | grep "image_id:.*(forces new resource)")
                  TF_PLAN_CHECK=\$(echo "\$TF_OUT" | grep "Plan: 4 to add, 2 to change, 4 to destroy.")

                  if [ -z "\$TF_ASG_CHECK" ] || [ -z "\$TF_LC_CHECK" ] || [ -z "\$TF_AMI_CHECK" ] || [ -z "\$TF_PLAN_CHECK" ]
                  then
                    echo "Terraform plan does not match expectations."
                    exit 1
                  fi
                """
              }
            }
          }
        }
      }
    }

    stage('Deploy AMI') {
      steps {
        script {
          dir('code') {
            withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
              withCredentials([
                file(credentialsId: backend_config, variable: 'bc'),
                file(credentialsId: terraform_vars, variable: 'tv')
              ]) {
                sh """
                  cd terraform/${params.ENV}

                  export TF_CLI_ARGS="-no-color"

                  terraform init -backend-config=$bc
                  terraform apply \
                    -var-file=$tv \
                    -var 'ami_id=${params.AMI_ID}' \
                    -var 'instance_type=${params.INSTANCE_CLASS}' \
                    -auto-approve
                """
              }
            }
          }
        }
      }
    }

    stage('Django - migrate and collectstatic') {
      steps {
        script {
          dir('code') {
            withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
              withCredentials([
                file(credentialsId: private_key, variable: 'pk'),
                file(credentialsId: vault_pass, variable: 'vp')
              ]) {
                sh """
                  . venv/bin/activate

                  rm -Rf ./tmp

                  EC2_INI_PATH=inventory/config/${params.ENV}.ini \
                  ansible-playbook playbook/django/main.yml \
                    --vault-password-file ${vp} \
                    --private-key ${pk} \
                    -i inventory/ec2.py \
                    -l 'tag_Function_app_AppServer' \
                    -e 'env=${params.ENV}' \
                    -e 'collectstatic=${params.COLLECT_STATIC}' \
                    -e 'migrate=${params.MIGRATE}'
                """
              }
            }
          }
        }
      }
      when {
        expression {
          params.COLLECT_STATIC == "yes" || params.MIGRATE == "yes"
        }
      }
    }
  }

  post {
    success {
      withCredentials([
        string(credentialsId: 'hipchat-room', variable: 'room'),
        string(credentialsId: 'hipchat-server', variable: 'server'),
        string(credentialsId: 'hipchat-token', variable: 'token')
      ]) {
        hipchatSend(
            color: 'GREEN',
            notify: true,
            message: "SUCCESS: ${env.JOB_NAME} [${params.ENV}]",
            room: room,
            sendAs: '',
            server: server,
            token: token,
            v2enabled: true
        )
      }
    }

    failure {
      withCredentials([
        string(credentialsId: 'hipchat-room', variable: 'room'),
        string(credentialsId: 'hipchat-server', variable: 'server'),
        string(credentialsId: 'hipchat-token', variable: 'token')
      ]) {
        hipchatSend(
          color: 'RED',
          notify: true,
          message: "FAILED: ${env.JOB_NAME} [${params.ENV}]",
          room: room,
          sendAs: '',
          server: server,
          token: token,
          v2enabled: true
        )
      }
    }
  }
}
