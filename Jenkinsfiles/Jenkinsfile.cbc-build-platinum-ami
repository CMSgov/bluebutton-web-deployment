pipeline {
  agent {
    kubernetes {
      defaultContainer "bb2-cbc-build"
      yamlFile "Jenkinsfiles/cbc-build.yaml"
    }
  }

  environment {
    AWS_ACCESS_KEY_ID = credentials("bb2-aws-key-id")
    AWS_SECRET_ACCESS_KEY = credentials("bb2-aws-key-secret")
    AWS_DEFAULT_REGION = "us-east-1"
    VAULT_PASSWORD = credentials("bb2-vault-password")
  }

  parameters {
    string(
      name: "PACKER_SOURCE_AMI_SEARCH_FILTER",
      //FIXME: Use latest RH 7.8 gold image until RH 7.9 gold image is supported
      defaultValue: "EAST-RH 7-8*",
      description: "The search filter string for the gold image."
    )

    string(
      name: "PACKER_SOURCE_AMI_ID",
      defaultValue: "",
      description: "The AMI ID for the gold image, overrides search filter string"
    )
  }

  stages {
    stage('Notify Slack') {
      steps {
        script {
          helpers = load "Jenkinsfiles/helpers.groovy"
          //helpers.slackNotify "STARTING"
          echo "DEBUG: slackNotify STARTING"
        }
      }
    }

    stage("Build Platinum AMI") {
      steps {
        sh '''
          if [[ -n "${PACKER_SOURCE_AMI_ID}" ]]; then
            SOURCE_AMI=${PACKER_SOURCE_AMI_ID}
          elif [[ -n "${PACKER_SOURCE_AMI_SEARCH_FILTER}" ]]; then
            SOURCE_AMI=${aws ec2 describe-images \
            --filters "Name=name,Values=${PACKER_SOURCE_AMI_SEARCH_FILTER}" \
            --query "sort_by(Images, &CreationDate)[-1].ImageId" \
            --output text}
          else
            echo "Please provide PACKER_SOURCE_AMI_SEARCH_FILTER or PACKER_SOURCE_AMI_ID parameter"
            exit 1
          fi

          echo ${SOURCE_AMI}
          #packer build -color=false \
          #  -var "vault_password_file=${VAULT_PASSWORD}" \
          #  -var "source_ami=${SOURCE_AMI}" \
          #  packer/build_platinum_ami.json
        '''
      }
    }
  }

  post {
    success {
      script {
        //helpers.slackNotify("SUCCESS", "good")
        echo "DEBUG: slackNotify SUCCESS"
      }
    }

    failure {
      script {
        //helpers.slackNotify("FAILURE", "bad")
        echo "DEBUG: slackNotify FAILURE"
      }
    }
  }
}