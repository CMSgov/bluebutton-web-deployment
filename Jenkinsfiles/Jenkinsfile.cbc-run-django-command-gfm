pipeline {
  agent {
    kubernetes {
      defaultContainer "bb2-cbc-build"
      yamlFile "Jenkinsfiles/cbc-build_django.yaml"
    }
  }

  environment {
    AWS_DEFAULT_REGION = "us-east-1"
    // Remove SSH_KEY from here due to dynamic param usage
  }

  parameters {
    choice(
      name: "APP_ENV",
      choices: ["test", "impl", "prod"],
      description: "The environment to run in."
    )
    string(
      name: "DJANGO_COMMAND",
      defaultValue: "",
      description: "The django management command to run."
    )
    string(
      name: "CANARY_IP",
      defaultValue: "",
      description: "When this is set, run against a canary IP rather than a tagged deployment instance"
    )
  }

  stages {
    stage("Assume AWS Role") {
      steps {
        withCredentials([
          string(credentialsId: "${params.APP_ENV == 'test' ? 'aws-assume-role-arn' : 'aws-assume-role-arn-prod'}", variable: 'ROLE_ARN')
        ]) {
          script {
            def sessionName = "jenkins-${env.BUILD_ID}"
            def credsJson = sh(
              script: """
                aws sts assume-role \\
                  --role-arn "$ROLE_ARN" \\
                  --role-session-name "$sessionName" \\
                  --output json
              """,
              returnStdout: true
            ).trim()

            def creds = readJSON text: credsJson

            env.AWS_ACCESS_KEY_ID     = creds.Credentials.AccessKeyId
            env.AWS_SECRET_ACCESS_KEY = creds.Credentials.SecretAccessKey
            env.AWS_SESSION_TOKEN     = creds.Credentials.SessionToken

            echo "Assumed Role ARN: ${ROLE_ARN}"
            echo "Access Key ID (partial): ${env.AWS_ACCESS_KEY_ID.take(8)}..."
            echo "Session Token (partial): ${env.AWS_SESSION_TOKEN.take(8)}..."
            echo "Expiration: ${creds.Credentials.Expiration}"

            def callerIdentityStatus = sh(
              script: "aws sts get-caller-identity --output text",
              returnStatus: true
            )
            if (callerIdentityStatus != 0) {
              error("Failed to verify assumed AWS role.")
            } else {
              echo "Verified AWS role:\n${sh(script: 'aws sts get-caller-identity', returnStdout: true)}"
            }
          }
        }
      }
    }

    stage("Notify Slack") {
      steps {
        script {
          helpers = load "Jenkinsfiles/helpers.groovy"
          helpers.slackNotify "STARTING - ENV:${params.APP_ENV}"
        }
      }
    }

    stage("Determine Ansible Config") {
      steps {
        script {
          if (params.CANARY_IP?.trim()) {
            echo("Using CANARY IP")
            env.ANSIBLE_INVENTORY = "${params.CANARY_IP},"
            env.ANSIBLE_SUBSET = ""
          } else {
            echo("Using EC2 tags")
            env.ANSIBLE_INVENTORY = "inventory/aws_ec2.yaml"
            env.ANSIBLE_SUBSET = "tag_Name_bb_${params.APP_ENV}_app"
          }
          echo "Inventory: ${env.ANSIBLE_INVENTORY}"
          echo "Subset: ${env.ANSIBLE_SUBSET}"
        }
      }
    }

    stage("Run Django Command") {
      steps {
        withCredentials([
          sshUserPrivateKey(
            credentialsId: "bb2-ssh-key-${params.APP_ENV}-V4",
            keyFileVariable: 'SSH_KEY_FILE'
          )
        ]) {
          sh """
            chmod 600 "$SSH_KEY_FILE"
            echo "=== SSH Key First 20 lines ==="
            head -n 20 "$SSH_KEY_FILE"
            echo "=== Testing SSH connection ==="
            ssh -vvv -i "$SSH_KEY_FILE" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@10.162.51.119 || echo "SSH test failed"

            export EC2_INI_PATH=inventory/config/${params.APP_ENV}.ini
            ansible-playbook playbook/run_django_command/main.yml \\
              --private-key "$SSH_KEY_FILE" \\
              -i "${env.ANSIBLE_INVENTORY}" \\
              -l "${env.ANSIBLE_SUBSET}" \\
              -e "env=${params.APP_ENV}" \\
              -e "django_command=${params.DJANGO_COMMAND}" \\
              -vvvv
          """
        }
      }
    }
  }

  post {
    success {
      script {
        def helpers = load "Jenkinsfiles/helpers.groovy"
        helpers.slackNotify("SUCCESS - ENV:${params.APP_ENV}", "good")
      }
    }
    failure {
      script {
        def helpers = load "Jenkinsfiles/helpers.groovy"
        helpers.slackNotify("FAILURE - ENV:${params.APP_ENV}", "bad")
      }
    }
  }
}
