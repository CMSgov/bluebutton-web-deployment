def aws_creds = 'cbj-deploy'
def private_key = ''
def vault_pass = 'vault-pass'
def backend_config = ''
def terraform_vars = ''
def release_version = ''
def ami_id = ''
def helpers

 pipeline {
  agent {
    node {
      label ''
      customWorkspace 'blue-button-deploy-canary'
    }
  }

   parameters {
    string(
      defaultValue: "*/master",
      description: 'The branch of the deployment repo to use for the build.',
      name: 'DEPLOY_BRANCH'
    )
    string(
      defaultValue: "",
      description: 'The Blue Button AMI id that will be used for the deployment.',
      name: 'AMI_ID'
    )
    choice(
      choices: 'test\nimpl\nprod',
      description: 'The environment to deploy the canary to. Required.',
      name: 'ENV'
    )
    string(
      defaultValue: "0",
      description: 'The number of Terraform changes expected.',
      name: 'TF_EXPECT_CHANGES'
    )
  }

   stages {
     stage('Notify') {
       steps {
         script {
           helpers = load "Jenkinsfiles/helpers.groovy"
           helpers.slackNotify "STARTING - Env:${params.ENV}"
         }
       }
     }

    stage('Ensure ENV') {
      steps {
        script {
          if (params.ENV == "") {
            sh "exit 1"
          }
        }
      }
    }

     stage('Ensure AMI ID') {
      steps {
        script {
          if (ami_id == "") {
            if (params.AMI_ID != "") {
              ami_id = "${params.AMI_ID}"
            } else {
              sh "exit 1"
            }
          }
        }
      }
    }

     stage('Clear the working dir') {
      steps {
        dir('code') {
          deleteDir()
        }
      }
    }

     stage('Checkout Repo') {
      parallel {
        stage('Checkout Deployment Repo') {
          steps {
            checkout([
              $class: 'GitSCM',
              branches: [[
                name: "${params.DEPLOY_BRANCH}"
              ]],
              doGenerateSubmoduleConfigurations: false,
              extensions: [[
                $class: 'RelativeTargetDirectory',
                relativeTargetDir: 'code'
              ]],
              userRemoteConfigs: [[
                url: 'https://github.com/CMSgov/bluebutton-web-deployment.git'
              ]]
            ])
          }
        }
        stage('Checkout TFENV Repo') {
          steps {
            checkout([
              $class: 'GitSCM',
              branches: [[
                name: "*/master"
              ]],
              doGenerateSubmoduleConfigurations: false,
              extensions: [[
                $class: 'RelativeTargetDirectory',
                relativeTargetDir: 'tfenv'
              ]],
              userRemoteConfigs: [[
                url: 'https://github.com/tfutils/tfenv.git'
              ]]
            ])
          }
        }
      }
    }

     stage('Install requirements') {
      steps {
        dir('code') {
          script {
            sh """
              virtualenv -ppython2.7 venv
              . venv/bin/activate

               pip install --upgrade pip
              pip install --upgrade cffi
            """
          }
        }
      }
    }

     stage('Install Terraform Version') {
      steps {
        dir('tfenv') {
          script {
            sh """
              bin/tfenv install
              terraform --version
            """
          }
        }
      }
    }

     stage('Set private key file') {
      steps {
        script {
          private_key = "${params.ENV}-key"
        }
      }
    }

     stage('Determine terraform config files') {
      steps {
        script {
          backend_config = "bb-backend-${params.ENV}_canary"
          terraform_vars = "bb-tf-${params.ENV}_canary"
        }
      }
    }

     stage('Sanity check terraform plan') {
      steps {
        script {
          dir('code') {
            withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
              withCredentials([
                file(credentialsId: backend_config, variable: 'bc'),
                file(credentialsId: terraform_vars, variable: 'tv')
              ]) {
                sh """
                  cd terraform/${params.ENV}_canary

                   export TF_CLI_ARGS="-no-color"

                   terraform init -backend-config=$bc

                   TF_OUT=\$(terraform plan \
                    -var-file=$tv \
                    -var 'ami_id=$ami_id')

                   TF_PLAN_CHECK=\$(echo "\$TF_OUT" | grep "Plan: 1 to add, ${params.TF_EXPECT_CHANGES} to change, 0 to destroy.")

                   if [ -z "\$TF_PLAN_CHECK" ]
                  then
                    echo "Terraform plan does not match expectations."
                    exit 1
                  fi
                """
              }
            }
          }
        }
      }
    }

     stage('Deploy AMI') {
      steps {
        script {
          dir('code') {
            withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
              withCredentials([
                file(credentialsId: backend_config, variable: 'bc'),
                file(credentialsId: terraform_vars, variable: 'tv')
              ]) {
                sh """
                  cd terraform/${params.ENV}_canary

                   export TF_CLI_ARGS="-no-color"

                   terraform init -backend-config=$bc
                  terraform apply \
                    -var-file=$tv \
                    -var 'ami_id=$ami_id' \
                    -var 'instance_type=${params.INSTANCE_CLASS}' \
                    -auto-approve
                """
              }
            }
          }
        }
      }
    }
  }

  post {
    success {
      script {
        helpers.slackNotify("SUCCESS", 'good')
      }
    }

    failure {
      script {
        try {
          helpers.slackNotify("FAILED!", 'bad')
        } catch (err) {
          emailext body: "A CBJ job failed and we couldn't notify Slack.\n${BUILD_URL}", subject: 'CBJ Build Failure', to: 'bluebutton-dev-alert@fearsol.com'
        }
      }
    }

    always {
      // Cleanup the workspace
      deleteDir()
    }
  }
}
