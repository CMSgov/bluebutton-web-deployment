def private_key = ''
def BB20_PLATINUM_AMI_ID = ''
def release_version = ''
def vault_pass = 'vault-pass'
def aws_creds = 'cbj-deploy'
def helpers

pipeline {
  agent {
    node {
      label ''
      customWorkspace 'blue-button-build-app-ami'
    }
  }

  parameters {
    string(
      defaultValue: "master",
      description: 'The branch of the application repo to build. Required. Defaults to master.',
      name: 'BB20_APP_VERSION'
    )
    string(
      defaultValue: "master",
      description: 'The branch of the deployment repo to use for the build. Default to master. Required. Defaults to master.',
      name: 'BB20_DEPLOY_BRANCH'
    )
    string(
      defaultValue: "",
      description: 'The AMI ID of the Platinum Gold Image. If unset, the latest will be pulled from AWS and used.',
      name: 'BB20_PLATINUM_AMI_ID'
    )
    string(
      defaultValue: "subnet-81ecfbab",
      description: 'The subnet ID where the build server will be launched. You are safe to leave this. We are currently use a DEV subnet for builds.',
      name: 'SUBNET_ID'
    )
    choice(
      choices: 'dev\ntest\nimpl\nprod',
      description: 'The environment to deploy to. Default to DEV.',
      name: 'ENV'
    )
    choice(
      choices: 'no\nyes',
      description: 'Should we run database migrations on deploy? Default to Yes.',
      name: 'MIGRATE'
    )
    choice(
      choices: 'yes\nno',
      description: 'Should we run collectstatic on deploy? Default to No.',
      name: 'COLLECT_STATIC'
    )
  }

  stages {
    stage('Ensure BRANCH, ENV, AMI_ID and SUBNET_ID') {
      steps {
        sh """
        if [ -z "${params.BRANCH}" ] || [ -z "${params.ENV}" ] || [ -z "${params.AMI_ID}" ] || [ -z "${params.SUBNET_ID}" ]
        then
          exit 1
        fi
        """
      }
    }
    stage('Notify') {
      steps {
        script {
          helpers = load "Jenkinsfiles/helpers.groovy"
          helpers.slackNotify "STARTING"
        }
      }
    }

    stage('Set release_version var') {
      steps {
        script {
          if (params.BB20_APP_VERSION == 'master') {
            release_version = "latest-${params.BB20_APP_VERSION}"
          } else {
            // Git tag, commit hash or branch other than master
            release_version = "${params.BB20_APP_VERSION}"
          }
        }
      }
    }

    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[
            name: "${params.BB20_DEPLOY_BRANCH}"
          ]],
          doGenerateSubmoduleConfigurations: true,
          extensions: [[
            $class: 'RelativeTargetDirectory',
            relativeTargetDir: 'code'
          ]],
          userRemoteConfigs: [[
            url: 'https://github.com/CMSgov/bluebutton-web-deployment.git'
          ]]
        ])
      }
    }

    stage('Acquire Platinum AMI') {
    steps {
        script {
            if (params.BB20_PLATINUM_AMI_ID.startsWith("ami")) {
            BB20_PLATINUM_AMI = params.BB20_PLATINUM_AMI_ID
            } else {
                withAwsCli(credentialsId: aws_creds, region: 'us-east-1') {
                  BB20_PLATINUM_AMI = sh(
                          script: "aws --region us-east-1 ec2 describe-images --filters Name=name,Values='bb20-platinum-??????????????' --query 'sort_by(Images,&CreationDate)[-1]' --output json | jq -r .ImageId",
                          returnStdout: true
                          ).trim()
                    println("BB20 PLATINUM AMI ID: = ${BB20_PLATINUM_AMI}")
                  }
              }
        }
    }
}

    stage('Build AMI') {
      steps {
        script {
          dir('code') {
            withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
              withCredentials([
                file(credentialsId: vault_pass, variable: 'vp')
              ]) {
                sh """
                  virtualenv -ppython3 venv
                  . venv/bin/activate

                  pip install --upgrade pip
                  pip install --upgrade cffi

                  pip install ansible==2.4.2.0
                  pip install boto

                  packer build -color=false \
                    -var 'vault_password_file=${vp}' \
                    -var 'git_branch=${params.BB20_APP_VERSION}' \
                    -var 'subnet_id=${params.SUBNET_ID}' \
                    -var 'source_ami=${BB20_PLATINUM_AMI}' \
                    -var 'release_version=${release_version}' \
                    packer/build_app_ami.json

                """
                BUILD_AMI_ID = sh(
                script: "cat manifest.json | jq -r .builds[0].artifact_id |  cut -d':' -f2",
                returnStdout: true
                ).trim()
                println("BUILD_AMI_ID: = ${BUILD_AMI_ID}")
              }
            }
          }
        }
      }
    }

    stage ('Deploy to DEV') {
      when {
        allOf {
          environment name: 'BB20_APP_VERSION', value: 'master'; environment name: 'ENV', value: 'dev'
        }
      }
        steps {
        echo "Condition met for CD to DEV"
        build job: 'DEPLOY - BB AMI', propagate: false, wait: false, parameters: [[$class: 'StringParameterValue', name: 'DEPLOY_BRANCH', value: "${BB20_DEPLOY_BRANCH}"], [$class: 'StringParameterValue', name: 'AMI_ID', value: "${BUILD_AMI_ID}"], [$class: 'StringParameterValue', name: 'ENV', value: "${ENV}"], [$class: 'StringParameterValue', name: 'MIGRATE', value: "${MIGRATE}"], [$class: 'StringParameterValue', name: 'COLLECT_STATIC', value: "${COLLECT_STATIC}"], [$class: 'StringParameterValue', name: 'TF_EXPECT_CHANGES', value: "3"]]
        }
    }
  }

  post {
      success {
        script {
          helpers.slackNotify("SUCCESS", 'good')
        }
      }

      failure {
        script {
          try {
            helpers.slackNotify("FAILED!", 'bad')
          } catch (err) {
            emailext body: "A CBJ job failed and we couldn't notify Slack.\n${BUILD_URL}", subject: 'CBJ Build Failure', to: 'bluebutton-dev-alert@fearsol.com'
          }
        }
      }

      always {
        // Cleanup the workspace
        deleteDir()
      }
  }
}
