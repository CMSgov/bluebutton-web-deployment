def private_key = ''
def vault_pass = 'vault-pass'
def aws_creds = 'cbj-deploy'
def release_version = ''
def helpers

pipeline {
  agent {
    node {
      label 'rhel7-scheduled'
      customWorkspace 'blue-button-build-platinum-ami'
    }
  }

  triggers {
    cron('H 23 * * *')
  }

  parameters {
    string(
      defaultValue: "master",
      description: 'The branch or tag of the bluebutton-web-server repo to build.',
      name: 'BB20_APP_VERSION'
    )
    string(
      defaultValue: "master",
      description: 'The branch of the bluebutton-web-deployment repo containing the ops scripts.',
      name: 'BB20_DEPLOY_BRANCH'
    )
    string(
      defaultValue: "",
      description: 'The AMI ID of the GDIT Gold Image.',
      name: 'GDIT_GOLD_IMAGE_AMI_ID'
    )
    string(
      defaultValue: "subnet-81ecfbab",
      description: 'The subnet ID where the build server will be launched.',
      name: 'SUBNET_ID'
    )
    string(
      defaultValue: "m3.medium",
      description: 'The class/size of the EC2 instance to launch.',
      name: 'INSTANCE_CLASS'
    )
  }

  stages {
    stage('Notify') {
      steps {
        script {
          helpers = load "Jenkinsfiles/helpers.groovy"
          helpers.slackNotify "STARTING"
        }
      }
    }

    stage('Acquire Latest Gold AMI'){
      steps {
        script {
          if (params.GDIT_GOLD_IMAGE_AMI_ID == '') {
            GDIT_GOLD_IMAGE_AMI_ID = sh(
              returnStdout: true, 
              script: "/usr/local/bin/aws ec2 describe-images --filters \
              'Name=name,Values=\"EAST-RH 7-? Gold Image V.1.?? (HVM) ??-??-??\"' \
              'Name=state,Values=available' --region us-east-1 --output json | \
              jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'"
              ).trim()
            echo "LATEST GOLD IMAGE AMI: ${GDIT_GOLD_IMAGE_AMI_ID}" 
          }
          else {
            GDIT_GOLD_IMAGE_AMI_ID = params.GDIT_GOLD_IMAGE_AMI_ID
            echo "USING GOLD IMAGE AMI: ${GDIT_GOLD_IMAGE_AMI_ID}" 
          }
        }
      }
    }

    stage('Ensure Params') {
      steps {
        sh """
        if [ -z "${params.BB20_APP_VERSION}" ] || [ -z "${GDIT_GOLD_IMAGE_AMI_ID}" ] || [ -z "${params.SUBNET_ID}" ]
        then
          exit 1
        fi
        """
      }
    }

    stage('Set release_version var') {
      steps {
        script {
          if (params.BB20_APP_VERSION == 'master') {
            release_version = "latest-${params.BB20_APP_VERSION}"
          } else {
            // Git tag, commit hash or branch other than master
            release_version = "${params.BB20_APP_VERSION}"
          }
        }
      }
    }

    stage('Setup and Checkout Deployment Repo') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[
            name: "${params.BB20_DEPLOY_BRANCH}"
          ]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[
            $class: 'RelativeTargetDirectory',
            relativeTargetDir: 'code'
          ]],
          userRemoteConfigs: [[
            url: 'https://github.com/CMSgov/bluebutton-web-deployment.git'
          ]]
        ])
        script {
            helpers = load "Jenkinsfiles/helpers.groovy"
        }
      }
    }

    stage('Build Platinum AMI') {
      steps {
        script {
          dir('code') {
            withAwsCli(credentialsId: aws_creds, defaultRegion: 'us-east-1') {
              withCredentials([
                file(credentialsId: vault_pass, variable: 'vp')
              ]) {
                try {
                  sh """
                    virtualenv -ppython3 venv
                    . venv/bin/activate

                    pip install --upgrade pip
                    pip install --upgrade cffi

                    pip install ansible==2.4.2.0
                    pip install boto

                    packer build -color=false \
                      -var 'vault_password_file=${vp}' \
                      -var 'git_branch=${params.BB20_APP_VERSION}' \
                      -var 'subnet_id=${params.SUBNET_ID}' \
                      -var 'source_ami=${GDIT_GOLD_IMAGE_AMI_ID}' \
                      -var 'release_version=${release_version}' \
                      packer/build_platinum_ami.json 2>&1 | tee platinum_packer_output.txt
                  """
                }
                catch (Exception e) {
                  helpers.slackNotify("FAILED!", 'bad')
                  currentBuild.result = 'FAILURE'
                }
              }
            }
          }
        }
      }
    }

    stage('Acquire Platinum AMI ID'){
        steps {
            script {
                dir('code') {
                    BB20_PLATINUM_AMI_ID = sh(returnStdout: true, script: """grep 'us-east-1: ami-' platinum_packer_output.txt | cut -d ' ' -f2 | tr '\n' ' ' | sed -e 's/ //g'""")
                    echo "BB20 PLATINUM AMI: ${BB20_PLATINUM_AMI_ID}"
                    if( "${BB20_PLATINUM_AMI_ID}" == '' ) {
                    currentBuild.result = 'FAILED'
                    return
                    }
                }
            }
        }
    }

    stage('Execute Full Build and Package') {
     when {
         expression { params.FULL_BB20_BUILD_AND_DEPLOY == true }
     }
     steps {
        build job: 'BUILD_BB_AMI',
        parameters: [string(name: 'BB20_APP_VERSION', value: "${params.BB20_APP_VERSION}"), string(name: 'ENV', value: "${params.ENV}"), string(name: 'BB20_DEPLOY_BRANCH', value: "${BB20_DEPLOY_BRANCH}"), string(name: 'BB20_PLATINUM_AMI_ID', value: "${BB20_PLATINUM_AMI_ID}"), string(name: 'SUBNET_ID', value: "${params.SUBNET_ID}")],
        wait: true,
        propagate: false
     }
    }
  }

  post {
      success {
        script {
          helpers.slackNotify("SUCCESS", 'good')
        }
      }

      failure {
        script {
          try {
            helpers.slackNotify("FAILED!", 'bad')
          } catch (err) {
            emailext body: "A CBJ job failed and we couldn't notify Slack.\n${BUILD_URL}", subject: 'CBJ Build Failure', to: 'bluebutton-dev-alert@fearsol.com'
          }
        }
      }

      always {
        // Cleanup the workspace
        deleteDir()
      }
  }
}
