pipeline {
  agent {
    kubernetes {
      defaultContainer "bb2-cbc-build"
      yamlFile "Jenkinsfiles/cbc-build.yaml"
    }
  }

  environment {
    AWS_DEFAULT_REGION = "us-east-1"
    EC2_KEY = credentials("ec2_user_al2023")
    EC2_PUB_KEY = credentials("ec2-user-pub-key_al2023")
  }

  parameters {
    string(name: "GOLD_AMI_SEARCH_FILTER", defaultValue: "al2023-legacy*", description: "The search filter string for the gold image.")
    string(name: "GOLD_AMI_ID", defaultValue: "", description: "The AMI ID for the gold image, overrides search filter string.")
    string(name: "DEPLOY_REPO_BRANCH", defaultValue: "master", description: "The branch of the deployment repo to build in AMI. Defaults to master.")
    choice(name: "ON_ERROR", choices: ["cleanup", "abort", "ask", "run-cleanup-provisioner"], description: "Selects what to do when the build fails during provisioning.")
    credentials(name: "ec2-user", defaultValue: 'ec2-user', description: "SSH user key for provisioning", required: true)
  }

  stages {
    stage("Assume AWS Role") {
      steps {
        withCredentials([string(credentialsId: 'aws-assume-role-arn', variable: 'ROLE_ARN')]) {
          script {
            def sessionName = "jenkins-${env.BUILD_ID}"
            def credsJson = sh(
              script: """#!/bin/bash
              aws sts assume-role \
                --role-arn "$ROLE_ARN" \
                --role-session-name "$sessionName" \
                --output json
              """,
              returnStdout: true
            ).trim()

            def creds = readJSON text: credsJson

            env.AWS_ACCESS_KEY_ID = creds.Credentials.AccessKeyId
            env.AWS_SECRET_ACCESS_KEY = creds.Credentials.SecretAccessKey
            env.AWS_SESSION_TOKEN = creds.Credentials.SessionToken
          }
        }
      }
    }

    stage("Fetch Private Subnet ID") {
      steps {
        script {
          // Query AWS to find a private subnet
          def privateSubnetId = sh(script: """#!/bin/bash
            PRIVATE_SUBNET_ID=$(aws ec2 describe-subnets \
              --filters "Name=tag:Name,Values=*private*" "Name=availabilityZone,Values=us-east-1*" \
              --query "Subnets[0].SubnetId" \
              --output text)
            echo $PRIVATE_SUBNET_ID
          """, returnStdout: true).trim()

          // Check if a subnet ID was found
          if (privateSubnetId == "None" || privateSubnetId == "") {
            error "No private subnet found!"
          }

          // Set the subnet ID to be used later in the build
          env.SUBNET_ID = privateSubnetId
        }
      }
    }

    stage("Notify Slack") {
      steps {
        script {
          helpers = load "Jenkinsfiles/helpers.groovy"
          helpers.slackNotify "STARTING"
        }
      }
    }

    stage("Determine Source AMI") {
      steps {
        script {
          if (params.GOLD_AMI_ID != "") {
            echo("Setting SOURCE_AMI from GOLD_AMI_ID")
            SOURCE_AMI = params.GOLD_AMI_ID
          } else if (params.GOLD_AMI_SEARCH_FILTER != "") {
            echo("Setting SOURCE_AMI from GOLD_AMI_SEARCH_FILTER")
            SOURCE_AMI = sh(returnStdout: true, script: """#!/bin/bash
              aws ec2 describe-images \
              --filters 'Name=name,Values=${params.GOLD_AMI_SEARCH_FILTER}' \
              --query 'sort_by(Images, &CreationDate)[-1].ImageId' \
              --output text
            """).trim()
          } else {
            error("Please set GOLD_AMI_SEARCH_FILTER or GOLD_AMI_ID")
          }
        }
      }
    }

    stage("Build Platinum AMI") {
      steps {
        sh """#!/bin/bash
          packer build -color=false \
            -on-error=${params.ON_ERROR} \
            -var 'source_ami=${SOURCE_AMI}' \
            -var 'ec2-user=${EC2_KEY}' \
            -var 'ec2-user-pub-key=${EC2_PUB_KEY}' \
            -var 'subnet_id=${env.SUBNET_ID}' \
            packer/build_platinum_ami_amzn2.json
        """
      }
    }
  }

  post {
    success {
      script {
        helpers.slackNotify("SUCCESS", "good")
      }
    }
    failure {
      script {
        helpers.slackNotify("FAILURE", "bad")
      }
    }
  }
}
